{
	"name": "inverterperf_loop",
	"properties": {
		"description": "DOES NOT RUN DAILY\nThis code is written to read daily Parquet files and perform the transformation to create Table for Inverters' Performance.",
		"folder": {
			"name": "Ananthapur"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "sparkpool1",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "56g",
			"driverCores": 8,
			"executorMemory": "56g",
			"executorCores": 8,
			"numExecutors": 2,
			"runAsWorkspaceSystemIdentity": false,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "23e9e348-f6b6-4e2a-b855-4bfc875e1fa9"
			}
		},
		"metadata": {
			"saveOutput": true,
			"synapse_widget": {
				"version": "0.1"
			},
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/37a47312-6f04-42dc-ad99-290d950fab5d/resourceGroups/AzureSynapse/providers/Microsoft.Synapse/workspaces/azure-synapse-devlop/bigDataPools/sparkpool1",
				"name": "sparkpool1",
				"type": "Spark",
				"endpoint": "https://azure-synapse-devlop.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/sparkpool1",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net",
					"authHeader": null
				},
				"sparkVersion": "3.1",
				"nodeCount": 10,
				"cores": 8,
				"memory": 56,
				"extraHeader": null
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"**INVERTER TABLE WITH VARIOUS DAY-LEVEL FEATURES LIKE: Energy, SpY, Donwtime, Wake-UpTime, SleepTime, EnergyLost, Efficiency**"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"import pandas as pd \r\n",
					"import datetime\r\n",
					"import numpy as np\r\n",
					"import matplotlib.pyplot as plt\r\n",
					"from pyspark.sql import SparkSession\r\n",
					"from pyspark.sql.types import *\r\n",
					"import pyspark.sql.functions as sf\r\n",
					"from datetime import datetime \r\n",
					"from datetime import date \r\n",
					"from datetime import timedelta\r\n",
					"# from pyspark.sql.functions import to_date\r\n",
					"from datetime import time\r\n",
					"import pytz\r\n",
					"from pathlib import Path\r\n",
					"#import pymsteams"
				],
				"execution_count": 10
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from datetime import date\r\n",
					"tz = pytz.timezone('Asia/Kolkata')\r\n",
					"todaydate = datetime.date(datetime.now(tz))\r\n",
					"start_date = date(2022,2,15)\r\n",
					"days=abs(todaydate-start_date).days\r\n",
					"days"
				],
				"execution_count": 11
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"pattoreadparquet = \"abfss://repono@ayanadatalake.dfs.core.windows.net/allcsvtoparquet/dt=\"\r\n",
					"LoopCounter=1\r\n",
					"tz = pytz.timezone('Asia/Kolkata')\r\n",
					"todaydate = datetime.date(datetime.now(tz))\r\n",
					"print(todaydate)\r\n",
					"mintime = datetime.min.time()\r\n",
					"DateList =[]\r\n",
					"while LoopCounter <= days :\r\n",
					"    DateList.append( datetime.date ( (datetime.combine(todaydate, mintime) - timedelta(days=LoopCounter)) ))\r\n",
					"    LoopCounter += 1\r\n",
					"DateListLength = len(DateList)\r\n",
					"#print(DateList)\r\n",
					"TableLoopCounter = 0\r\n",
					"DateLoopCounter = 0\r\n",
					"\r\n",
					"location1 = pattoreadparquet   \r\n",
					"DateList=DateList[::-1]\r\n",
					"print(DateList)\r\n",
					"#location1= location1+ str(DateList[DateLoopCounter])+str(\"/\")\r\n",
					"#print(location1)"
				],
				"execution_count": 12
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"for i in range(len(DateList)):\r\n",
					"    location1= location1+ str(DateList[i])+str(\"/\")\r\n",
					"    print(location1)\r\n",
					"    \r\n",
					"    \r\n",
					"    df = pd.read_parquet(location1)\r\n",
					"\r\n",
					"    location_input=\"abfss://repono@ayanadatalake.dfs.core.windows.net/staticfiles/\"\r\n",
					"    location_output=\"abfss://repono@ayanadatalake.dfs.core.windows.net/inverterPerf/\"\r\n",
					"    df = pd.read_parquet(location1)\r\n",
					"    #df = pd.read_parquet(\"abfss://repono@ayanadatalake.dfs.core.windows.net/allcsvtoparquet/dt=2022-02-11/\") #USE THIS LIKE FOR RUNNING FOR ANYPARTICULAR DAY\r\n",
					"\r\n",
					"    df.sort_values(by=\"ISTtime\",ascending=True,inplace=True)\r\n",
					"    df.sort_values(by=\"ISTtime\",ascending=True,inplace=True)\r\n",
					"    df=df[df[\"sitename\"]==\"ananthpuram\"]\r\n",
					"    df.drop([\"deviceid\",\"quality\",\"timestamp\",\"EventProcessedUtcTime\",\"PartitionId\",\"EventEnqueuedUtcTime\",\"IoTHub\",\"siteid\",\"sitename\"],axis=1,inplace=True)\r\n",
					"    df[\"ISTtime\"]=df[\"ISTtime\"].astype(\"datetime64[ns]\")\r\n",
					"    df[\"Date\"]=pd.DatetimeIndex(df[\"ISTtime\"]).date\r\n",
					"    df[\"Time\"]=pd.DatetimeIndex(df[\"ISTtime\"]).time\r\n",
					"    df[\"Hour\"]=pd.DatetimeIndex(df[\"ISTtime\"]).hour\r\n",
					"    df[\"Minute\"]=pd.DatetimeIndex(df[\"ISTtime\"]).minute\r\n",
					"    df=df[(df[\"Hour\"]>=6) & (df[\"Hour\"]<=19)]\r\n",
					"    df1=df.copy()\r\n",
					"    df2=df.copy()\r\n",
					"\r\n",
					"    df[\"SPP\"]=\"Ananthpuramu\"\r\n",
					"    df=df[df['itemname'].str.startswith('ICR', na=True)]\r\n",
					"    df=df[df['itemname'].str.contains('TODAY_GEN', na=True)]\r\n",
					"    len(df[\"itemname\"].unique())\r\n",
					"\r\n",
					"    df[\"ICR\"]=df[\"itemname\"].apply(lambda x:x.split(\"..\")[0])\r\n",
					"    df[\"INV\"]=df[\"itemname\"].apply(lambda x:x.split(\"..\")[1].split('.')[0])\r\n",
					"\r\n",
					"    Blocklist=[]\r\n",
					"    for i in range(len(df)):\r\n",
					"        if df.iloc[i,1].split(\"..\")[0] in [\"ICR8\",\"ICR10\",\"ICR12\",\"ICR13\"]:\r\n",
					"            Blocklist.append(\"Antpr1\")\r\n",
					"        elif df.iloc[i,1].split(\"..\")[0] in [\"ICR16\",\"ICR17\",\"ICR18\",\"ICR19\"]:\r\n",
					"            Blocklist.append(\"Antpr2\")\r\n",
					"        elif df.iloc[i,1].split(\"..\")[0] in [\"ICR1\",\"ICR2\",\"ICR3\",\"ICR4\"]:\r\n",
					"            Blocklist.append(\"Antpr3\")\r\n",
					"        elif df.iloc[i,1].split(\"..\")[0] in [\"ICR11\",\"ICR14\",\"ICR15\",\"ICR20\"]:\r\n",
					"            Blocklist.append(\"Antpr4\")\r\n",
					"        elif df.iloc[i,1].split(\"..\")[0] in [\"ICR5\",\"ICR6\",\"ICR7\",\"ICR9\"]:\r\n",
					"            Blocklist.append(\"Antpr5\")\r\n",
					"\r\n",
					"    df[\"Block\"]=Blocklist\r\n",
					"\r\n",
					"    df[\"Inverter_OEM\"]=\"SG3125HV-20\"\r\n",
					"    ICR_dict={\"ICR1\":\"ICR01\",\r\n",
					"            \"ICR2\":\"ICR02\",\r\n",
					"            \"ICR3\":\"ICR03\",\r\n",
					"            \"ICR4\":\"ICR04\",\r\n",
					"            \"ICR5\":\"ICR05\",\r\n",
					"            \"ICR6\":\"ICR06\",\r\n",
					"            \"ICR7\":\"ICR07\",\r\n",
					"            \"ICR8\":\"ICR08\",\r\n",
					"            \"ICR9\":\"ICR09\"}\r\n",
					"    df[\"ICR\"].replace(ICR_dict,inplace=True)\r\n",
					"\r\n",
					"    df[\"Inv\"]=df[\"ICR\"].str[0]+df[\"ICR\"].str[-2:]+\"_\"+df[\"INV\"].str[-1]\r\n",
					"\r\n",
					"    dfc=df.groupby(by=[\"Inv\",\"Hour\"]).agg(\"max\").reset_index()\r\n",
					"\r\n",
					"    dfc_final=dfc.copy()\r\n",
					"    dfc_final=dfc_final[[\"Date\",\"Hour\",\"Minute\",\"itemname\",\"Inv\",\"value\"]]\r\n",
					"\r\n",
					"    dfc1=dfc_final.groupby(by=[\"Inv\"]).agg(\"max\").reset_index()\r\n",
					"\r\n",
					"    Radiation_Block1=df2[df2['itemname']==\"ICR13..WMS.GTI_W\"]\r\n",
					"    Radiation_Block1=Radiation_Block1[[\"ISTtime\",\"itemname\",\"value\"]]\r\n",
					"    Radiation_Block1[\"ISTtime\"]=Radiation_Block1[\"ISTtime\"].astype(\"datetime64[ns]\")\r\n",
					"    Radiation_Block1[\"Hour\"]=pd.DatetimeIndex(Radiation_Block1[\"ISTtime\"]).hour\r\n",
					"    Radiation_Block1[\"Minute\"]=pd.DatetimeIndex(Radiation_Block1[\"ISTtime\"]).minute\r\n",
					"\r\n",
					"    Radiation_Block2=df2[df2['itemname']==\"ICR17..WMS.GTI_W\"]\r\n",
					"    Radiation_Block2=Radiation_Block2[[\"ISTtime\",\"itemname\",\"value\"]]\r\n",
					"    Radiation_Block2[\"ISTtime\"]=Radiation_Block2[\"ISTtime\"].astype(\"datetime64[ns]\")\r\n",
					"    Radiation_Block2[\"Hour\"]=pd.DatetimeIndex(Radiation_Block2[\"ISTtime\"]).hour\r\n",
					"    Radiation_Block2[\"Minute\"]=pd.DatetimeIndex(Radiation_Block2[\"ISTtime\"]).minute\r\n",
					"\r\n",
					"    Radiation_Block3=df2[df2['itemname']==\"ICR1..WMS.GTI_W\"]\r\n",
					"    Radiation_Block3=Radiation_Block3[[\"ISTtime\",\"itemname\",\"value\"]]\r\n",
					"    Radiation_Block3[\"ISTtime\"]=Radiation_Block3[\"ISTtime\"].astype(\"datetime64[ns]\")\r\n",
					"    Radiation_Block3[\"Hour\"]=pd.DatetimeIndex(Radiation_Block3[\"ISTtime\"]).hour\r\n",
					"    Radiation_Block3[\"Minute\"]=pd.DatetimeIndex(Radiation_Block3[\"ISTtime\"]).minute\r\n",
					"\r\n",
					"    Radiation_Block4=df2[df2['itemname']==\"ICR17..WMS.GTI_W\"]\r\n",
					"    #Radiation_Block4=df2[df2['itemname']==\"MCR..MCR_WMS.GTI_W\"]\r\n",
					"    Radiation_Block4=Radiation_Block4[[\"ISTtime\",\"itemname\",\"value\"]]\r\n",
					"    Radiation_Block4[\"ISTtime\"]=Radiation_Block4[\"ISTtime\"].astype(\"datetime64[ns]\")\r\n",
					"    Radiation_Block4[\"Hour\"]=pd.DatetimeIndex(Radiation_Block4[\"ISTtime\"]).hour\r\n",
					"    Radiation_Block4[\"Minute\"]=pd.DatetimeIndex(Radiation_Block4[\"ISTtime\"]).minute\r\n",
					"    Radiation_Block4\r\n",
					"\r\n",
					"    Radiation_Block5=df2[df2['itemname']==\"ICR7..WMS.GTI_W\"]\r\n",
					"    Radiation_Block5=Radiation_Block5[[\"ISTtime\",\"itemname\",\"value\"]]\r\n",
					"    Radiation_Block5[\"ISTtime\"]=Radiation_Block5[\"ISTtime\"].astype(\"datetime64[ns]\")\r\n",
					"    Radiation_Block5[\"Hour\"]=pd.DatetimeIndex(Radiation_Block5[\"ISTtime\"]).hour\r\n",
					"    Radiation_Block5[\"Minute\"]=pd.DatetimeIndex(Radiation_Block5[\"ISTtime\"]).minute\r\n",
					"\r\n",
					"\r\n",
					"\r\n",
					"    df2=df2[df2['itemname'].str.startswith('ICR', na=True)]\r\n",
					"    df1=df1[df1['itemname'].str.startswith('ICR', na=True)]\r\n",
					"    df1=df1[df1['itemname'].str.contains('INVERTER_EFFICIENCY', na=True)]\r\n",
					"\r\n",
					"    df2=df2[df2['itemname'].str.contains('kW', na=True)]\r\n",
					"    df2 = df2[~df2[\"itemname\"].str.contains('DC', na=True)]\r\n",
					"\r\n",
					"    Block1_list=['ICR8..INV1.kW',\r\n",
					"    'ICR8..INV2.kW',\r\n",
					"    'ICR8..INV3.kW',\r\n",
					"    'ICR8..INV4.kW',\r\n",
					"    'ICR10..INV1.kW',\r\n",
					"    'ICR10..INV2.kW',\r\n",
					"    'ICR10..INV3.kW',\r\n",
					"    'ICR10..INV4.kW',\r\n",
					"    'ICR12..INV1.kW',\r\n",
					"    'ICR12..INV2.kW',\r\n",
					"    'ICR12..INV3.kW',\r\n",
					"    'ICR12..INV4.kW',\r\n",
					"    'ICR13..INV1.kW',\r\n",
					"    'ICR13..INV2.kW',\r\n",
					"    'ICR13..INV3.kW',\r\n",
					"    'ICR13..INV4.kW']\r\n",
					"    Block4_list=['ICR11..INV3.kW',\r\n",
					"    'ICR11..INV2.kW',\r\n",
					"    'ICR11..INV1.kW',\r\n",
					"    'ICR11..INV4.kW',\r\n",
					"    'ICR14..INV3.kW',\r\n",
					"    'ICR14..INV4.kW',\r\n",
					"    'ICR14..INV2.kW',\r\n",
					"    'ICR14..INV1.kW',\r\n",
					"    'ICR15..INV1.kW',\r\n",
					"    'ICR15..INV4.kW',\r\n",
					"    'ICR15..INV3.kW',\r\n",
					"    'ICR15..INV2.kW',\r\n",
					"    'ICR20..INV1.kW',\r\n",
					"    'ICR20..INV2.kW',\r\n",
					"    'ICR20..INV3.kW',\r\n",
					"    'ICR20..INV4.kW']\r\n",
					"    Block3_list=['ICR1..INV2.kW',\r\n",
					"    'ICR1..INV1.kW',\r\n",
					"    'ICR1..INV3.kW',\r\n",
					"    'ICR1..INV4.kW',\r\n",
					"    'ICR2..INV4.kW',\r\n",
					"    'ICR2..INV3.kW',\r\n",
					"    'ICR2..INV2.kW',\r\n",
					"    'ICR2..INV1.kW',\r\n",
					"    'ICR3..INV1.kW',\r\n",
					"    'ICR3..INV4.kW',\r\n",
					"    'ICR3..INV3.kW',\r\n",
					"    'ICR3..INV2.kW',\r\n",
					"    'ICR4..INV1.kW',\r\n",
					"    'ICR4..INV2.kW',\r\n",
					"    'ICR4..INV3.kW',\r\n",
					"    'ICR4..INV4.kW']\r\n",
					"    Block2_list=['ICR16..INV4.kW',\r\n",
					"    'ICR16..INV3.kW',\r\n",
					"    'ICR16..INV2.kW',\r\n",
					"    'ICR16..INV1.kW',\r\n",
					"    'ICR17..INV4.kW',\r\n",
					"    'ICR17..INV3.kW',\r\n",
					"    'ICR17..INV2.kW',\r\n",
					"    'ICR17..INV1.kW',\r\n",
					"    'ICR18..INV4.kW',\r\n",
					"    'ICR18..INV3.kW',\r\n",
					"    'ICR18..INV2.kW',\r\n",
					"    'ICR18..INV1.kW',\r\n",
					"    'ICR19..INV4.kW',\r\n",
					"    'ICR19..INV3.kW',\r\n",
					"    'ICR19..INV2.kW',\r\n",
					"    'ICR19..INV1.kW']\r\n",
					"    Block5_list=['ICR6..INV1.kW',\r\n",
					"    'ICR6..INV2.kW',\r\n",
					"    'ICR6..INV3.kW',\r\n",
					"    'ICR6..INV4.kW',\r\n",
					"    'ICR5..INV4.kW',\r\n",
					"    'ICR5..INV3.kW',\r\n",
					"    'ICR5..INV1.kW',\r\n",
					"    'ICR5..INV2.kW',\r\n",
					"    'ICR7..INV1.kW',\r\n",
					"    'ICR7..INV2.kW',\r\n",
					"    'ICR7..INV4.kW',\r\n",
					"    'ICR7..INV3.kW',\r\n",
					"    'ICR9..INV4.kW',\r\n",
					"    'ICR9..INV3.kW',\r\n",
					"    'ICR9..INV2.kW',\r\n",
					"    'ICR9..INV1.kW']\r\n",
					"\r\n",
					"    print(len(Block1_list),len(Block2_list),len(Block3_list),len(Block4_list),len(Block5_list))\r\n",
					"\r\n",
					"    import datetime\r\n",
					"\r\n",
					"    data_frame_list_final=[]\r\n",
					"    data_frame_inverter_downtime_list_final=[]\r\n",
					"\r\n",
					"    data_frame_list=[]\r\n",
					"    data_frame_inverter_downtime_list=[]\r\n",
					"    for i in Block1_list:\r\n",
					"        each_tag_list=[]\r\n",
					"        each_tag_list.append(i)\r\n",
					"        df_each_tag=df2[df2[\"itemname\"]==i]\r\n",
					"        df_each_tag_with_radiation=pd.merge(df_each_tag,Radiation_Block1,how=\"inner\",left_on=[\"Hour\",\"Minute\"],right_on=[\"Hour\",\"Minute\"])\r\n",
					"        df_each_tag_with_radiation=df_each_tag_with_radiation.drop_duplicates(subset=[\"Hour\",\"Minute\"]).reset_index(drop=True)\r\n",
					"        df_each_tag_with_radiation=df_each_tag_with_radiation[[\"ISTtime_x\",\"itemname_x\",\"value_x\",\"value_y\"]]\r\n",
					"        df_each_tag_with_radiation_pattern=df_each_tag_with_radiation[(df_each_tag_with_radiation[\"value_x\"]==0) & (df_each_tag_with_radiation[\"value_y\"]!=0)].reset_index(drop=True)\r\n",
					"        up_time=str(df_each_tag_with_radiation[df_each_tag_with_radiation[\"value_x\"]!=0][\"ISTtime_x\"].head(1)).split(\" \")[4].split(\"\\n\")[0]\r\n",
					"        sleep_time=str(df_each_tag_with_radiation[df_each_tag_with_radiation[\"value_x\"]!=0][\"ISTtime_x\"].tail(1)).split(\" \")[4].split(\"\\n\")[0]\r\n",
					"        up_time_hour=up_time.split(\":\")[0]\r\n",
					"        up_time_minute=up_time.split(\":\")[1]\r\n",
					"        up_time_second=up_time.split(\":\")[2].split(\".\")[0]\r\n",
					"        #up_time_millisecond=up_time.split(\":\")[2].split(\".\")[1]\r\n",
					"        sleep_time_hour=sleep_time.split(\":\")[0]\r\n",
					"        sleep_time_minute=sleep_time.split(\":\")[1]\r\n",
					"        sleep_time_second=sleep_time.split(\":\")[2].split(\".\")[0]\r\n",
					"        #sleep_time_millisecond=sleep_time.split(\":\")[2].split(\".\")[1]\r\n",
					"        a1=datetime.timedelta(hours=int(up_time_hour), minutes=int(up_time_minute), seconds=int(up_time_second)) \r\n",
					"        b1=datetime.timedelta(hours=int(sleep_time_hour), minutes=int(sleep_time_minute), seconds=int(sleep_time_second))\r\n",
					"        op_minute=(b1-a1).seconds/60\r\n",
					"        df_each_tag_inv_efficiency_average=df1[(df1[\"itemname\"]==i.split(\".\")[0]+\"..\"+i.split(\".\")[2]+\".INVERTER_EFFICIENCY\") & (df1[\"value\"]!=0)][\"value\"].mean()\r\n",
					"        df_each_tag_inv_efficiency_max=df1[(df1[\"itemname\"]==i.split(\".\")[0]+\"..\"+i.split(\".\")[2]+\".INVERTER_EFFICIENCY\") & (df1[\"value\"]!=0)][\"value\"].max()\r\n",
					"        \r\n",
					"        #print(up_time,sleep_time)\r\n",
					"        downtime=0\r\n",
					"        energy_loss=0\r\n",
					"        if len(df_each_tag_with_radiation_pattern)==0:\r\n",
					"            each_tag_list.append(np.round(downtime,2))\r\n",
					"            each_tag_list.append(up_time)\r\n",
					"            each_tag_list.append(sleep_time)\r\n",
					"            each_tag_list.append(op_minute)\r\n",
					"            each_tag_list.append(op_minute-np.round(downtime,2))\r\n",
					"            each_tag_list.append(np.round(df_each_tag_inv_efficiency_average,4))\r\n",
					"            each_tag_list.append(np.round(df_each_tag_inv_efficiency_max,4))\r\n",
					"            each_tag_list.append(np.round((energy_loss/60000)*df_each_tag_inv_efficiency_max*downtime,2))\r\n",
					"            data_frame_list.append(each_tag_list) \r\n",
					"        else:\r\n",
					"            print(df_each_tag_with_radiation_pattern)\r\n",
					"            #energy_loss=list(df_each_tag_with_radiation_pattern[\"value_y\"])\r\n",
					"            #energy_loss=[i if i<890 else 890 for i in energy_loss]\r\n",
					"            #energy_loss=np.sum(energy_loss)\r\n",
					"            index_list=[-1]\r\n",
					"            for i in range(0,len(df_each_tag_with_radiation_pattern)):\r\n",
					"                if i<=len(df_each_tag_with_radiation_pattern)-2:\r\n",
					"                    #print(\"i=\",i)\r\n",
					"                    hour_i=int(str(df_each_tag_with_radiation_pattern.iloc[i,0]).split(' ')[1].split(\":\")[0])\r\n",
					"                    minute_i=int(str(df_each_tag_with_radiation_pattern.iloc[i,0]).split(' ')[1].split(\":\")[1])\r\n",
					"                    second_i=int(str(df_each_tag_with_radiation_pattern.iloc[i,0]).split(' ')[1].split(\":\")[2].split(\".\")[0])\r\n",
					"                    #millisecond_i=int(str(df_each_tag_with_radiation_pattern.iloc[i,0]).split(' ')[1].split(\":\")[2].split(\".\")[1])\r\n",
					"                    hour_ii=int(str(df_each_tag_with_radiation_pattern.iloc[i+1,0]).split(' ')[1].split(\":\")[0])\r\n",
					"                    minute_ii=int(str(df_each_tag_with_radiation_pattern.iloc[i+1,0]).split(' ')[1].split(\":\")[1])\r\n",
					"                    second_ii=int(str(df_each_tag_with_radiation_pattern.iloc[i+1,0]).split(' ')[1].split(\":\")[2].split(\".\")[0])\r\n",
					"                    #millisecond_ii=int(str(df_each_tag_with_radiation_pattern.iloc[i+1,0]).split(' ')[1].split(\":\")[2].split(\".\")[1])\r\n",
					"                    a=datetime.timedelta(hours=int(hour_i), minutes=int(minute_i), seconds=int(second_i)) \r\n",
					"                    b=datetime.timedelta(hours=int(hour_ii), minutes=int(minute_ii), seconds=int(second_ii))\r\n",
					"                    minute=(b-a).seconds/60\r\n",
					"                    #print(minute)\r\n",
					"                    if minute>3:\r\n",
					"                        index_list.append(i)\r\n",
					"                else:\r\n",
					"                    break\r\n",
					"            index_list.append(len(df_each_tag_with_radiation_pattern)-1)\r\n",
					"            downtime=0\r\n",
					"            energy_loss=0\r\n",
					"            print(index_list)\r\n",
					"            for i in range(len(index_list)):\r\n",
					"                if i<=(len(index_list)-2):\r\n",
					"                    To=str(df_each_tag_with_radiation_pattern.iloc[index_list[i]+1,0]).split(' ')[1]\r\n",
					"                    From=str(df_each_tag_with_radiation_pattern.iloc[index_list[i+1],0]).split(' ')[1]\r\n",
					"                    print(To,From)\r\n",
					"                    Energy_Tag=(df_each_tag_with_radiation_pattern.iloc[0,1].split(\"..\")[0])+\"..\"+(df_each_tag_with_radiation_pattern.iloc[0,1].split(\"..\")[1]).split(\".\")[0]+\".\"+\"TODAY_GEN\"\r\n",
					"                    print(\"Energy_Tag_is\",Energy_Tag)\r\n",
					"                    #deviation\r\n",
					"                    To=str(df.iloc[0,0]).split(\" \")[0]+\" \"+To\r\n",
					"                    From=str(df.iloc[0,0]).split(\" \")[0]+\" \"+From\r\n",
					"                    deviation=df[(df[\"itemname\"]==Energy_Tag) & (df[\"ISTtime\"]>=str(To)) & (df[\"ISTtime\"]<=str(From))   ][\"value\"].std()\r\n",
					"                    print(\"deviation is\",deviation)\r\n",
					"                    if deviation>0:\r\n",
					"\r\n",
					"\r\n",
					"                        ml2=[]\r\n",
					"                        ml2.append(str(df_each_tag_with_radiation_pattern.iloc[0,0]).split(' ')[0])\r\n",
					"                        ml2.append(df_each_tag_with_radiation_pattern.iloc[0,1])\r\n",
					"                        #To=str(df_each_tag_with_radiation_pattern.iloc[index_list[i]+1,0]).split(' ')[1]\r\n",
					"                        #From=str(df_each_tag_with_radiation_pattern.iloc[index_list[i+1],0]).split(' ')[1]\r\n",
					"\r\n",
					"                        ml2.append(str(df_each_tag_with_radiation_pattern.iloc[index_list[i]+1,0]).split(' ')[1])\r\n",
					"                        ml2.append(str(df_each_tag_with_radiation_pattern.iloc[index_list[i+1],0]).split(' ')[1])\r\n",
					"\r\n",
					"                        hour_i=int(str(df_each_tag_with_radiation_pattern.iloc[index_list[i]+1,0]).split(' ')[1].split(\":\")[0])\r\n",
					"                        minute_i=int(str(df_each_tag_with_radiation_pattern.iloc[index_list[i]+1,0]).split(' ')[1].split(\":\")[1])\r\n",
					"                        second_i=int(str(df_each_tag_with_radiation_pattern.iloc[index_list[i]+1,0]).split(' ')[1].split(\":\")[2].split(\".\")[0])\r\n",
					"                        #millisecond_i=int(str(df_each_tag_with_radiation_pattern.iloc[index_list[i]+1,0]).split(' ')[1].split(\":\")[2].split(\".\")[1])\r\n",
					"                        hour_ii=int(str(df_each_tag_with_radiation_pattern.iloc[index_list[i+1],0]).split(' ')[1].split(\":\")[0])\r\n",
					"                        minute_ii=int(str(df_each_tag_with_radiation_pattern.iloc[index_list[i+1],0]).split(' ')[1].split(\":\")[1])\r\n",
					"                        second_ii=int(str(df_each_tag_with_radiation_pattern.iloc[index_list[i+1],0]).split(' ')[1].split(\":\")[2].split(\".\")[0])\r\n",
					"                        #millisecond_ii=int(str(df_each_tag_with_radiation_pattern.iloc[index_list[i+1],0]).split(' ')[1].split(\":\")[2].split(\".\")[1])\r\n",
					"                        a=datetime.timedelta(hours=int(hour_i), minutes=int(minute_i), seconds=int(second_i)) \r\n",
					"                        b=datetime.timedelta(hours=int(hour_ii), minutes=int(minute_ii), seconds=int(second_ii))\r\n",
					"                        #print(hour_i,minute_i,second_i,hour_ii,minute_ii,second_ii)\r\n",
					"                        minute=(b-a).seconds/60\r\n",
					"                        downtime=downtime+minute\r\n",
					"                        energy_sum_during_downtime=Radiation_Block1[(Radiation_Block1[\"ISTtime\"]>=str(To)) & (Radiation_Block1[\"ISTtime\"]<=str(From))   ][\"value\"].sum()\r\n",
					"                        energy_loss=energy_loss+energy_sum_during_downtime\r\n",
					"                        ml2.append(minute)\r\n",
					"                        data_frame_inverter_downtime_list.extend([ml2])\r\n",
					"            each_tag_list.append(np.round(downtime,2))\r\n",
					"            each_tag_list.append(up_time)\r\n",
					"            each_tag_list.append(sleep_time)\r\n",
					"            each_tag_list.append(op_minute)\r\n",
					"            each_tag_list.append(op_minute-np.round(downtime,2))\r\n",
					"            each_tag_list.append(np.round(df_each_tag_inv_efficiency_average,4))\r\n",
					"            each_tag_list.append(np.round(df_each_tag_inv_efficiency_max,4))\r\n",
					"            each_tag_list.append(np.round((energy_loss/60000)*df_each_tag_inv_efficiency_max*downtime,2))\r\n",
					"            data_frame_list.append(each_tag_list)\r\n",
					"    data_frame_list_final.extend(data_frame_list)\r\n",
					"    data_frame_inverter_downtime_list_final.extend(data_frame_inverter_downtime_list)\r\n",
					"\r\n",
					"    print(len(data_frame_list_final))\r\n",
					"\r\n",
					"    data_frame_list=[]\r\n",
					"    data_frame_inverter_downtime_list=[]\r\n",
					"    for i in Block2_list:\r\n",
					"        each_tag_list=[]\r\n",
					"        each_tag_list.append(i)\r\n",
					"        df_each_tag=df2[df2[\"itemname\"]==i]\r\n",
					"        df_each_tag_with_radiation=pd.merge(df_each_tag,Radiation_Block2,how=\"inner\",left_on=[\"Hour\",\"Minute\"],right_on=[\"Hour\",\"Minute\"])\r\n",
					"        df_each_tag_with_radiation=df_each_tag_with_radiation.drop_duplicates(subset=[\"Hour\",\"Minute\"]).reset_index(drop=True)\r\n",
					"        df_each_tag_with_radiation=df_each_tag_with_radiation[[\"ISTtime_x\",\"itemname_x\",\"value_x\",\"value_y\"]]\r\n",
					"        df_each_tag_with_radiation_pattern=df_each_tag_with_radiation[(df_each_tag_with_radiation[\"value_x\"]==0) & (df_each_tag_with_radiation[\"value_y\"]!=0)].reset_index(drop=True)\r\n",
					"        up_time=str(df_each_tag_with_radiation[df_each_tag_with_radiation[\"value_x\"]!=0][\"ISTtime_x\"].head(1)).split(\" \")[4].split(\"\\n\")[0]\r\n",
					"        sleep_time=str(df_each_tag_with_radiation[df_each_tag_with_radiation[\"value_x\"]!=0][\"ISTtime_x\"].tail(1)).split(\" \")[4].split(\"\\n\")[0]\r\n",
					"        up_time_hour=up_time.split(\":\")[0]\r\n",
					"        up_time_minute=up_time.split(\":\")[1]\r\n",
					"        up_time_second=up_time.split(\":\")[2].split(\".\")[0]\r\n",
					"        #up_time_millisecond=up_time.split(\":\")[2].split(\".\")[1]\r\n",
					"        sleep_time_hour=sleep_time.split(\":\")[0]\r\n",
					"        sleep_time_minute=sleep_time.split(\":\")[1]\r\n",
					"        sleep_time_second=sleep_time.split(\":\")[2].split(\".\")[0]\r\n",
					"        #sleep_time_millisecond=sleep_time.split(\":\")[2].split(\".\")[1]\r\n",
					"        a1=datetime.timedelta(hours=int(up_time_hour), minutes=int(up_time_minute), seconds=int(up_time_second)) \r\n",
					"        b1=datetime.timedelta(hours=int(sleep_time_hour), minutes=int(sleep_time_minute), seconds=int(sleep_time_second))\r\n",
					"        op_minute=(b1-a1).seconds/60\r\n",
					"        df_each_tag_inv_efficiency_average=df1[(df1[\"itemname\"]==i.split(\".\")[0]+\"..\"+i.split(\".\")[2]+\".INVERTER_EFFICIENCY\") & (df1[\"value\"]!=0)][\"value\"].mean()\r\n",
					"        df_each_tag_inv_efficiency_max=df1[(df1[\"itemname\"]==i.split(\".\")[0]+\"..\"+i.split(\".\")[2]+\".INVERTER_EFFICIENCY\") & (df1[\"value\"]!=0)][\"value\"].max()\r\n",
					"        \r\n",
					"        #print(up_time,sleep_time)\r\n",
					"        downtime=0\r\n",
					"        energy_loss=0\r\n",
					"        if len(df_each_tag_with_radiation_pattern)==0:\r\n",
					"            each_tag_list.append(np.round(downtime,2))\r\n",
					"            each_tag_list.append(up_time)\r\n",
					"            each_tag_list.append(sleep_time)\r\n",
					"            each_tag_list.append(op_minute)\r\n",
					"            each_tag_list.append(op_minute-np.round(downtime,2))\r\n",
					"            each_tag_list.append(np.round(df_each_tag_inv_efficiency_average,4))\r\n",
					"            each_tag_list.append(np.round(df_each_tag_inv_efficiency_max,4))\r\n",
					"            each_tag_list.append(np.round((energy_loss/60000)*df_each_tag_inv_efficiency_max*downtime,2))\r\n",
					"            data_frame_list.append(each_tag_list) \r\n",
					"        else:\r\n",
					"            print(df_each_tag_with_radiation_pattern)\r\n",
					"            #energy_loss=list(df_each_tag_with_radiation_pattern[\"value_y\"])\r\n",
					"            #energy_loss=[i if i<890 else 890 for i in energy_loss]\r\n",
					"            #energy_loss=np.sum(energy_loss)\r\n",
					"            index_list=[-1]\r\n",
					"            for i in range(0,len(df_each_tag_with_radiation_pattern)):\r\n",
					"                if i<=len(df_each_tag_with_radiation_pattern)-2:\r\n",
					"                    #print(\"i=\",i)\r\n",
					"                    hour_i=int(str(df_each_tag_with_radiation_pattern.iloc[i,0]).split(' ')[1].split(\":\")[0])\r\n",
					"                    minute_i=int(str(df_each_tag_with_radiation_pattern.iloc[i,0]).split(' ')[1].split(\":\")[1])\r\n",
					"                    second_i=int(str(df_each_tag_with_radiation_pattern.iloc[i,0]).split(' ')[1].split(\":\")[2].split(\".\")[0])\r\n",
					"                    #millisecond_i=int(str(df_each_tag_with_radiation_pattern.iloc[i,0]).split(' ')[1].split(\":\")[2].split(\".\")[1])\r\n",
					"                    hour_ii=int(str(df_each_tag_with_radiation_pattern.iloc[i+1,0]).split(' ')[1].split(\":\")[0])\r\n",
					"                    minute_ii=int(str(df_each_tag_with_radiation_pattern.iloc[i+1,0]).split(' ')[1].split(\":\")[1])\r\n",
					"                    second_ii=int(str(df_each_tag_with_radiation_pattern.iloc[i+1,0]).split(' ')[1].split(\":\")[2].split(\".\")[0])\r\n",
					"                    #millisecond_ii=int(str(df_each_tag_with_radiation_pattern.iloc[i+1,0]).split(' ')[1].split(\":\")[2].split(\".\")[1])\r\n",
					"                    a=datetime.timedelta(hours=int(hour_i), minutes=int(minute_i), seconds=int(second_i)) \r\n",
					"                    b=datetime.timedelta(hours=int(hour_ii), minutes=int(minute_ii), seconds=int(second_ii))\r\n",
					"                    minute=(b-a).seconds/60\r\n",
					"                    #print(minute)\r\n",
					"                    if minute>3:\r\n",
					"                        index_list.append(i)\r\n",
					"                else:\r\n",
					"                    break\r\n",
					"            index_list.append(len(df_each_tag_with_radiation_pattern)-1)\r\n",
					"            downtime=0\r\n",
					"            energy_loss=0\r\n",
					"            print(index_list)\r\n",
					"            for i in range(len(index_list)):\r\n",
					"                if i<=(len(index_list)-2):\r\n",
					"                    To=str(df_each_tag_with_radiation_pattern.iloc[index_list[i]+1,0]).split(' ')[1]\r\n",
					"                    From=str(df_each_tag_with_radiation_pattern.iloc[index_list[i+1],0]).split(' ')[1]\r\n",
					"                    print(To,From)\r\n",
					"                    Energy_Tag=(df_each_tag_with_radiation_pattern.iloc[0,1].split(\"..\")[0])+\"..\"+(df_each_tag_with_radiation_pattern.iloc[0,1].split(\"..\")[1]).split(\".\")[0]+\".\"+\"TODAY_GEN\"\r\n",
					"                    print(\"Energy_Tag_is\",Energy_Tag)\r\n",
					"                    #deviation\r\n",
					"                    To=str(df.iloc[0,0]).split(\" \")[0]+\" \"+To\r\n",
					"                    From=str(df.iloc[0,0]).split(\" \")[0]+\" \"+From\r\n",
					"                    deviation=df[(df[\"itemname\"]==Energy_Tag) & (df[\"ISTtime\"]>=str(To)) & (df[\"ISTtime\"]<=str(From))   ][\"value\"].std()\r\n",
					"                    print(\"deviation is\",deviation)\r\n",
					"                    if deviation>0:\r\n",
					"\r\n",
					"\r\n",
					"                        ml2=[]\r\n",
					"                        ml2.append(str(df_each_tag_with_radiation_pattern.iloc[0,0]).split(' ')[0])\r\n",
					"                        ml2.append(df_each_tag_with_radiation_pattern.iloc[0,1])\r\n",
					"                        #To=str(df_each_tag_with_radiation_pattern.iloc[index_list[i]+1,0]).split(' ')[1]\r\n",
					"                        #From=str(df_each_tag_with_radiation_pattern.iloc[index_list[i+1],0]).split(' ')[1]\r\n",
					"\r\n",
					"                        ml2.append(str(df_each_tag_with_radiation_pattern.iloc[index_list[i]+1,0]).split(' ')[1])\r\n",
					"                        ml2.append(str(df_each_tag_with_radiation_pattern.iloc[index_list[i+1],0]).split(' ')[1])\r\n",
					"\r\n",
					"                        hour_i=int(str(df_each_tag_with_radiation_pattern.iloc[index_list[i]+1,0]).split(' ')[1].split(\":\")[0])\r\n",
					"                        minute_i=int(str(df_each_tag_with_radiation_pattern.iloc[index_list[i]+1,0]).split(' ')[1].split(\":\")[1])\r\n",
					"                        second_i=int(str(df_each_tag_with_radiation_pattern.iloc[index_list[i]+1,0]).split(' ')[1].split(\":\")[2].split(\".\")[0])\r\n",
					"                        #millisecond_i=int(str(df_each_tag_with_radiation_pattern.iloc[index_list[i]+1,0]).split(' ')[1].split(\":\")[2].split(\".\")[1])\r\n",
					"                        hour_ii=int(str(df_each_tag_with_radiation_pattern.iloc[index_list[i+1],0]).split(' ')[1].split(\":\")[0])\r\n",
					"                        minute_ii=int(str(df_each_tag_with_radiation_pattern.iloc[index_list[i+1],0]).split(' ')[1].split(\":\")[1])\r\n",
					"                        second_ii=int(str(df_each_tag_with_radiation_pattern.iloc[index_list[i+1],0]).split(' ')[1].split(\":\")[2].split(\".\")[0])\r\n",
					"                        #millisecond_ii=int(str(df_each_tag_with_radiation_pattern.iloc[index_list[i+1],0]).split(' ')[1].split(\":\")[2].split(\".\")[1])\r\n",
					"                        a=datetime.timedelta(hours=int(hour_i), minutes=int(minute_i), seconds=int(second_i)) \r\n",
					"                        b=datetime.timedelta(hours=int(hour_ii), minutes=int(minute_ii), seconds=int(second_ii))\r\n",
					"                        #print(hour_i,minute_i,second_i,hour_ii,minute_ii,second_ii)\r\n",
					"                        minute=(b-a).seconds/60\r\n",
					"                        downtime=downtime+minute\r\n",
					"                        energy_sum_during_downtime=Radiation_Block2[(Radiation_Block2[\"ISTtime\"]>=str(To)) & (Radiation_Block2[\"ISTtime\"]<=str(From))   ][\"value\"].sum()\r\n",
					"                        energy_loss=energy_loss+energy_sum_during_downtime\r\n",
					"                        ml2.append(minute)\r\n",
					"                        data_frame_inverter_downtime_list.extend([ml2])\r\n",
					"            each_tag_list.append(np.round(downtime,2))\r\n",
					"            each_tag_list.append(up_time)\r\n",
					"            each_tag_list.append(sleep_time)\r\n",
					"            each_tag_list.append(op_minute)\r\n",
					"            each_tag_list.append(op_minute-np.round(downtime,2))\r\n",
					"            each_tag_list.append(np.round(df_each_tag_inv_efficiency_average,4))\r\n",
					"            each_tag_list.append(np.round(df_each_tag_inv_efficiency_max,4))\r\n",
					"            each_tag_list.append(np.round((energy_loss/60000)*df_each_tag_inv_efficiency_max*downtime,2))\r\n",
					"            data_frame_list.append(each_tag_list)\r\n",
					"    data_frame_list_final.extend(data_frame_list)\r\n",
					"    data_frame_inverter_downtime_list_final.extend(data_frame_inverter_downtime_list)\r\n",
					"\r\n",
					"    print(len(data_frame_list_final))\r\n",
					"\r\n",
					"    data_frame_list=[]\r\n",
					"    data_frame_inverter_downtime_list=[]\r\n",
					"    for i in Block3_list:\r\n",
					"        each_tag_list=[]\r\n",
					"        each_tag_list.append(i)\r\n",
					"        df_each_tag=df2[df2[\"itemname\"]==i]\r\n",
					"        df_each_tag_with_radiation=pd.merge(df_each_tag,Radiation_Block3,how=\"inner\",left_on=[\"Hour\",\"Minute\"],right_on=[\"Hour\",\"Minute\"])\r\n",
					"        df_each_tag_with_radiation=df_each_tag_with_radiation.drop_duplicates(subset=[\"Hour\",\"Minute\"]).reset_index(drop=True)\r\n",
					"        df_each_tag_with_radiation=df_each_tag_with_radiation[[\"ISTtime_x\",\"itemname_x\",\"value_x\",\"value_y\"]]\r\n",
					"        df_each_tag_with_radiation_pattern=df_each_tag_with_radiation[(df_each_tag_with_radiation[\"value_x\"]==0) & (df_each_tag_with_radiation[\"value_y\"]!=0)].reset_index(drop=True)\r\n",
					"        up_time=str(df_each_tag_with_radiation[df_each_tag_with_radiation[\"value_x\"]!=0][\"ISTtime_x\"].head(1)).split(\" \")[4].split(\"\\n\")[0]\r\n",
					"        sleep_time=str(df_each_tag_with_radiation[df_each_tag_with_radiation[\"value_x\"]!=0][\"ISTtime_x\"].tail(1)).split(\" \")[4].split(\"\\n\")[0]\r\n",
					"        up_time_hour=up_time.split(\":\")[0]\r\n",
					"        up_time_minute=up_time.split(\":\")[1]\r\n",
					"        up_time_second=up_time.split(\":\")[2].split(\".\")[0]\r\n",
					"        #up_time_millisecond=up_time.split(\":\")[2].split(\".\")[1]\r\n",
					"        sleep_time_hour=sleep_time.split(\":\")[0]\r\n",
					"        sleep_time_minute=sleep_time.split(\":\")[1]\r\n",
					"        sleep_time_second=sleep_time.split(\":\")[2].split(\".\")[0]\r\n",
					"        #sleep_time_millisecond=sleep_time.split(\":\")[2].split(\".\")[1]\r\n",
					"        a1=datetime.timedelta(hours=int(up_time_hour), minutes=int(up_time_minute), seconds=int(up_time_second)) \r\n",
					"        b1=datetime.timedelta(hours=int(sleep_time_hour), minutes=int(sleep_time_minute), seconds=int(sleep_time_second))\r\n",
					"        op_minute=(b1-a1).seconds/60\r\n",
					"        df_each_tag_inv_efficiency_average=df1[(df1[\"itemname\"]==i.split(\".\")[0]+\"..\"+i.split(\".\")[2]+\".INVERTER_EFFICIENCY\") & (df1[\"value\"]!=0)][\"value\"].mean()\r\n",
					"        df_each_tag_inv_efficiency_max=df1[(df1[\"itemname\"]==i.split(\".\")[0]+\"..\"+i.split(\".\")[2]+\".INVERTER_EFFICIENCY\") & (df1[\"value\"]!=0)][\"value\"].max()\r\n",
					"        \r\n",
					"        #print(up_time,sleep_time)\r\n",
					"        downtime=0\r\n",
					"        energy_loss=0\r\n",
					"        if len(df_each_tag_with_radiation_pattern)==0:\r\n",
					"            each_tag_list.append(np.round(downtime,2))\r\n",
					"            each_tag_list.append(up_time)\r\n",
					"            each_tag_list.append(sleep_time)\r\n",
					"            each_tag_list.append(op_minute)\r\n",
					"            each_tag_list.append(op_minute-np.round(downtime,2))\r\n",
					"            each_tag_list.append(np.round(df_each_tag_inv_efficiency_average,4))\r\n",
					"            each_tag_list.append(np.round(df_each_tag_inv_efficiency_max,4))\r\n",
					"            each_tag_list.append(np.round((energy_loss/60000)*df_each_tag_inv_efficiency_max*downtime,2))\r\n",
					"            data_frame_list.append(each_tag_list) \r\n",
					"        else:\r\n",
					"            print(df_each_tag_with_radiation_pattern)\r\n",
					"            #energy_loss=list(df_each_tag_with_radiation_pattern[\"value_y\"])\r\n",
					"            #energy_loss=[i if i<890 else 890 for i in energy_loss]\r\n",
					"            #energy_loss=np.sum(energy_loss)\r\n",
					"            index_list=[-1]\r\n",
					"            for i in range(0,len(df_each_tag_with_radiation_pattern)):\r\n",
					"                if i<=len(df_each_tag_with_radiation_pattern)-2:\r\n",
					"                    #print(\"i=\",i)\r\n",
					"                    hour_i=int(str(df_each_tag_with_radiation_pattern.iloc[i,0]).split(' ')[1].split(\":\")[0])\r\n",
					"                    minute_i=int(str(df_each_tag_with_radiation_pattern.iloc[i,0]).split(' ')[1].split(\":\")[1])\r\n",
					"                    second_i=int(str(df_each_tag_with_radiation_pattern.iloc[i,0]).split(' ')[1].split(\":\")[2].split(\".\")[0])\r\n",
					"                    #millisecond_i=int(str(df_each_tag_with_radiation_pattern.iloc[i,0]).split(' ')[1].split(\":\")[2].split(\".\")[1])\r\n",
					"                    hour_ii=int(str(df_each_tag_with_radiation_pattern.iloc[i+1,0]).split(' ')[1].split(\":\")[0])\r\n",
					"                    minute_ii=int(str(df_each_tag_with_radiation_pattern.iloc[i+1,0]).split(' ')[1].split(\":\")[1])\r\n",
					"                    second_ii=int(str(df_each_tag_with_radiation_pattern.iloc[i+1,0]).split(' ')[1].split(\":\")[2].split(\".\")[0])\r\n",
					"                    #millisecond_ii=int(str(df_each_tag_with_radiation_pattern.iloc[i+1,0]).split(' ')[1].split(\":\")[2].split(\".\")[1])\r\n",
					"                    a=datetime.timedelta(hours=int(hour_i), minutes=int(minute_i), seconds=int(second_i)) \r\n",
					"                    b=datetime.timedelta(hours=int(hour_ii), minutes=int(minute_ii), seconds=int(second_ii))\r\n",
					"                    minute=(b-a).seconds/60\r\n",
					"                    #print(minute)\r\n",
					"                    if minute>3:\r\n",
					"                        index_list.append(i)\r\n",
					"                else:\r\n",
					"                    break\r\n",
					"            index_list.append(len(df_each_tag_with_radiation_pattern)-1)\r\n",
					"            downtime=0\r\n",
					"            energy_loss=0\r\n",
					"            print(index_list)\r\n",
					"            for i in range(len(index_list)):\r\n",
					"                if i<=(len(index_list)-2):\r\n",
					"                    To=str(df_each_tag_with_radiation_pattern.iloc[index_list[i]+1,0]).split(' ')[1]\r\n",
					"                    From=str(df_each_tag_with_radiation_pattern.iloc[index_list[i+1],0]).split(' ')[1]\r\n",
					"                    print(To,From)\r\n",
					"                    Energy_Tag=(df_each_tag_with_radiation_pattern.iloc[0,1].split(\"..\")[0])+\"..\"+(df_each_tag_with_radiation_pattern.iloc[0,1].split(\"..\")[1]).split(\".\")[0]+\".\"+\"TODAY_GEN\"\r\n",
					"                    print(\"Energy_Tag_is\",Energy_Tag)\r\n",
					"                    #deviation\r\n",
					"                    To=str(df.iloc[0,0]).split(\" \")[0]+\" \"+To\r\n",
					"                    From=str(df.iloc[0,0]).split(\" \")[0]+\" \"+From\r\n",
					"                    deviation=df[(df[\"itemname\"]==Energy_Tag) & (df[\"ISTtime\"]>=str(To)) & (df[\"ISTtime\"]<=str(From))   ][\"value\"].std()\r\n",
					"                    print(\"deviation is\",deviation)\r\n",
					"                    if deviation>0:\r\n",
					"\r\n",
					"\r\n",
					"                        ml2=[]\r\n",
					"                        ml2.append(str(df_each_tag_with_radiation_pattern.iloc[0,0]).split(' ')[0])\r\n",
					"                        ml2.append(df_each_tag_with_radiation_pattern.iloc[0,1])\r\n",
					"                        #To=str(df_each_tag_with_radiation_pattern.iloc[index_list[i]+1,0]).split(' ')[1]\r\n",
					"                        #From=str(df_each_tag_with_radiation_pattern.iloc[index_list[i+1],0]).split(' ')[1]\r\n",
					"\r\n",
					"                        ml2.append(str(df_each_tag_with_radiation_pattern.iloc[index_list[i]+1,0]).split(' ')[1])\r\n",
					"                        ml2.append(str(df_each_tag_with_radiation_pattern.iloc[index_list[i+1],0]).split(' ')[1])\r\n",
					"\r\n",
					"                        hour_i=int(str(df_each_tag_with_radiation_pattern.iloc[index_list[i]+1,0]).split(' ')[1].split(\":\")[0])\r\n",
					"                        minute_i=int(str(df_each_tag_with_radiation_pattern.iloc[index_list[i]+1,0]).split(' ')[1].split(\":\")[1])\r\n",
					"                        second_i=int(str(df_each_tag_with_radiation_pattern.iloc[index_list[i]+1,0]).split(' ')[1].split(\":\")[2].split(\".\")[0])\r\n",
					"                        #millisecond_i=int(str(df_each_tag_with_radiation_pattern.iloc[index_list[i]+1,0]).split(' ')[1].split(\":\")[2].split(\".\")[1])\r\n",
					"                        hour_ii=int(str(df_each_tag_with_radiation_pattern.iloc[index_list[i+1],0]).split(' ')[1].split(\":\")[0])\r\n",
					"                        minute_ii=int(str(df_each_tag_with_radiation_pattern.iloc[index_list[i+1],0]).split(' ')[1].split(\":\")[1])\r\n",
					"                        second_ii=int(str(df_each_tag_with_radiation_pattern.iloc[index_list[i+1],0]).split(' ')[1].split(\":\")[2].split(\".\")[0])\r\n",
					"                        #millisecond_ii=int(str(df_each_tag_with_radiation_pattern.iloc[index_list[i+1],0]).split(' ')[1].split(\":\")[2].split(\".\")[1])\r\n",
					"                        a=datetime.timedelta(hours=int(hour_i), minutes=int(minute_i), seconds=int(second_i)) \r\n",
					"                        b=datetime.timedelta(hours=int(hour_ii), minutes=int(minute_ii), seconds=int(second_ii))\r\n",
					"                        #print(hour_i,minute_i,second_i,hour_ii,minute_ii,second_ii)\r\n",
					"                        minute=(b-a).seconds/60\r\n",
					"                        downtime=downtime+minute\r\n",
					"                        energy_sum_during_downtime=Radiation_Block3[(Radiation_Block3[\"ISTtime\"]>=str(To)) & (Radiation_Block3[\"ISTtime\"]<=str(From))   ][\"value\"].sum()\r\n",
					"                        energy_loss=energy_loss+energy_sum_during_downtime\r\n",
					"                        ml2.append(minute)\r\n",
					"                        data_frame_inverter_downtime_list.extend([ml2])\r\n",
					"            each_tag_list.append(np.round(downtime,2))\r\n",
					"            each_tag_list.append(up_time)\r\n",
					"            each_tag_list.append(sleep_time)\r\n",
					"            each_tag_list.append(op_minute)\r\n",
					"            each_tag_list.append(op_minute-np.round(downtime,2))\r\n",
					"            each_tag_list.append(np.round(df_each_tag_inv_efficiency_average,4))\r\n",
					"            each_tag_list.append(np.round(df_each_tag_inv_efficiency_max,4))\r\n",
					"            each_tag_list.append(np.round((energy_loss/60000)*df_each_tag_inv_efficiency_max*downtime,2))\r\n",
					"            data_frame_list.append(each_tag_list)\r\n",
					"    data_frame_list_final.extend(data_frame_list)\r\n",
					"    data_frame_inverter_downtime_list_final.extend(data_frame_inverter_downtime_list)\r\n",
					"\r\n",
					"    print(len(data_frame_list_final))\r\n",
					"\r\n",
					"    data_frame_list=[]\r\n",
					"    data_frame_inverter_downtime_list=[]\r\n",
					"    for i in Block4_list:\r\n",
					"        each_tag_list=[]\r\n",
					"        each_tag_list.append(i)\r\n",
					"        df_each_tag=df2[df2[\"itemname\"]==i]\r\n",
					"        df_each_tag_with_radiation=pd.merge(df_each_tag,Radiation_Block2,how=\"inner\",left_on=[\"Hour\",\"Minute\"],right_on=[\"Hour\",\"Minute\"])\r\n",
					"        df_each_tag_with_radiation=df_each_tag_with_radiation.drop_duplicates(subset=[\"Hour\",\"Minute\"]).reset_index(drop=True)\r\n",
					"        df_each_tag_with_radiation=df_each_tag_with_radiation[[\"ISTtime_x\",\"itemname_x\",\"value_x\",\"value_y\"]]\r\n",
					"        df_each_tag_with_radiation_pattern=df_each_tag_with_radiation[(df_each_tag_with_radiation[\"value_x\"]==0) & (df_each_tag_with_radiation[\"value_y\"]!=0)].reset_index(drop=True)\r\n",
					"        up_time=str(df_each_tag_with_radiation[df_each_tag_with_radiation[\"value_x\"]!=0][\"ISTtime_x\"].head(1)).split(\" \")[4].split(\"\\n\")[0]\r\n",
					"        sleep_time=str(df_each_tag_with_radiation[df_each_tag_with_radiation[\"value_x\"]!=0][\"ISTtime_x\"].tail(1)).split(\" \")[4].split(\"\\n\")[0]\r\n",
					"        up_time_hour=up_time.split(\":\")[0]\r\n",
					"        up_time_minute=up_time.split(\":\")[1]\r\n",
					"        up_time_second=up_time.split(\":\")[2].split(\".\")[0]\r\n",
					"        #up_time_millisecond=up_time.split(\":\")[2].split(\".\")[1]\r\n",
					"        sleep_time_hour=sleep_time.split(\":\")[0]\r\n",
					"        sleep_time_minute=sleep_time.split(\":\")[1]\r\n",
					"        sleep_time_second=sleep_time.split(\":\")[2].split(\".\")[0]\r\n",
					"        #sleep_time_millisecond=sleep_time.split(\":\")[2].split(\".\")[1]\r\n",
					"        a1=datetime.timedelta(hours=int(up_time_hour), minutes=int(up_time_minute), seconds=int(up_time_second)) \r\n",
					"        b1=datetime.timedelta(hours=int(sleep_time_hour), minutes=int(sleep_time_minute), seconds=int(sleep_time_second))\r\n",
					"        op_minute=(b1-a1).seconds/60\r\n",
					"        df_each_tag_inv_efficiency_average=df1[(df1[\"itemname\"]==i.split(\".\")[0]+\"..\"+i.split(\".\")[2]+\".INVERTER_EFFICIENCY\") & (df1[\"value\"]!=0)][\"value\"].mean()\r\n",
					"        df_each_tag_inv_efficiency_max=df1[(df1[\"itemname\"]==i.split(\".\")[0]+\"..\"+i.split(\".\")[2]+\".INVERTER_EFFICIENCY\") & (df1[\"value\"]!=0)][\"value\"].max()\r\n",
					"        \r\n",
					"        #print(up_time,sleep_time)\r\n",
					"        downtime=0\r\n",
					"        energy_loss=0\r\n",
					"        if len(df_each_tag_with_radiation_pattern)==0:\r\n",
					"            each_tag_list.append(np.round(downtime,2))\r\n",
					"            each_tag_list.append(up_time)\r\n",
					"            each_tag_list.append(sleep_time)\r\n",
					"            each_tag_list.append(op_minute)\r\n",
					"            each_tag_list.append(op_minute-np.round(downtime,2))\r\n",
					"            each_tag_list.append(np.round(df_each_tag_inv_efficiency_average,4))\r\n",
					"            each_tag_list.append(np.round(df_each_tag_inv_efficiency_max,4))\r\n",
					"            each_tag_list.append(np.round((energy_loss/60000)*df_each_tag_inv_efficiency_max*downtime,2))\r\n",
					"            data_frame_list.append(each_tag_list) \r\n",
					"        else:\r\n",
					"            print(df_each_tag_with_radiation_pattern)\r\n",
					"            #energy_loss=list(df_each_tag_with_radiation_pattern[\"value_y\"])\r\n",
					"            #energy_loss=[i if i<890 else 890 for i in energy_loss]\r\n",
					"            #energy_loss=np.sum(energy_loss)\r\n",
					"            index_list=[-1]\r\n",
					"            for i in range(0,len(df_each_tag_with_radiation_pattern)):\r\n",
					"                if i<=len(df_each_tag_with_radiation_pattern)-2:\r\n",
					"                    #print(\"i=\",i)\r\n",
					"                    hour_i=int(str(df_each_tag_with_radiation_pattern.iloc[i,0]).split(' ')[1].split(\":\")[0])\r\n",
					"                    minute_i=int(str(df_each_tag_with_radiation_pattern.iloc[i,0]).split(' ')[1].split(\":\")[1])\r\n",
					"                    second_i=int(str(df_each_tag_with_radiation_pattern.iloc[i,0]).split(' ')[1].split(\":\")[2].split(\".\")[0])\r\n",
					"                    #millisecond_i=int(str(df_each_tag_with_radiation_pattern.iloc[i,0]).split(' ')[1].split(\":\")[2].split(\".\")[1])\r\n",
					"                    hour_ii=int(str(df_each_tag_with_radiation_pattern.iloc[i+1,0]).split(' ')[1].split(\":\")[0])\r\n",
					"                    minute_ii=int(str(df_each_tag_with_radiation_pattern.iloc[i+1,0]).split(' ')[1].split(\":\")[1])\r\n",
					"                    second_ii=int(str(df_each_tag_with_radiation_pattern.iloc[i+1,0]).split(' ')[1].split(\":\")[2].split(\".\")[0])\r\n",
					"                    #millisecond_ii=int(str(df_each_tag_with_radiation_pattern.iloc[i+1,0]).split(' ')[1].split(\":\")[2].split(\".\")[1])\r\n",
					"                    a=datetime.timedelta(hours=int(hour_i), minutes=int(minute_i), seconds=int(second_i)) \r\n",
					"                    b=datetime.timedelta(hours=int(hour_ii), minutes=int(minute_ii), seconds=int(second_ii))\r\n",
					"                    minute=(b-a).seconds/60\r\n",
					"                    #print(minute)\r\n",
					"                    if minute>3:\r\n",
					"                        index_list.append(i)\r\n",
					"                else:\r\n",
					"                    break\r\n",
					"            index_list.append(len(df_each_tag_with_radiation_pattern)-1)\r\n",
					"            downtime=0\r\n",
					"            energy_loss=0\r\n",
					"            print(index_list)\r\n",
					"            for i in range(len(index_list)):\r\n",
					"                if i<=(len(index_list)-2):\r\n",
					"                    To=str(df_each_tag_with_radiation_pattern.iloc[index_list[i]+1,0]).split(' ')[1]\r\n",
					"                    From=str(df_each_tag_with_radiation_pattern.iloc[index_list[i+1],0]).split(' ')[1]\r\n",
					"                    print(To,From)\r\n",
					"                    Energy_Tag=(df_each_tag_with_radiation_pattern.iloc[0,1].split(\"..\")[0])+\"..\"+(df_each_tag_with_radiation_pattern.iloc[0,1].split(\"..\")[1]).split(\".\")[0]+\".\"+\"TODAY_GEN\"\r\n",
					"                    print(\"Energy_Tag_is\",Energy_Tag)\r\n",
					"                    #deviation\r\n",
					"                    To=str(df.iloc[0,0]).split(\" \")[0]+\" \"+To\r\n",
					"                    From=str(df.iloc[0,0]).split(\" \")[0]+\" \"+From\r\n",
					"                    deviation=df[(df[\"itemname\"]==Energy_Tag) & (df[\"ISTtime\"]>=str(To)) & (df[\"ISTtime\"]<=str(From))   ][\"value\"].std()\r\n",
					"                    print(\"deviation is\",deviation)\r\n",
					"                    if deviation>0:\r\n",
					"\r\n",
					"\r\n",
					"                        ml2=[]\r\n",
					"                        ml2.append(str(df_each_tag_with_radiation_pattern.iloc[0,0]).split(' ')[0])\r\n",
					"                        ml2.append(df_each_tag_with_radiation_pattern.iloc[0,1])\r\n",
					"                        #To=str(df_each_tag_with_radiation_pattern.iloc[index_list[i]+1,0]).split(' ')[1]\r\n",
					"                        #From=str(df_each_tag_with_radiation_pattern.iloc[index_list[i+1],0]).split(' ')[1]\r\n",
					"\r\n",
					"                        ml2.append(str(df_each_tag_with_radiation_pattern.iloc[index_list[i]+1,0]).split(' ')[1])\r\n",
					"                        ml2.append(str(df_each_tag_with_radiation_pattern.iloc[index_list[i+1],0]).split(' ')[1])\r\n",
					"\r\n",
					"                        hour_i=int(str(df_each_tag_with_radiation_pattern.iloc[index_list[i]+1,0]).split(' ')[1].split(\":\")[0])\r\n",
					"                        minute_i=int(str(df_each_tag_with_radiation_pattern.iloc[index_list[i]+1,0]).split(' ')[1].split(\":\")[1])\r\n",
					"                        second_i=int(str(df_each_tag_with_radiation_pattern.iloc[index_list[i]+1,0]).split(' ')[1].split(\":\")[2].split(\".\")[0])\r\n",
					"                        #millisecond_i=int(str(df_each_tag_with_radiation_pattern.iloc[index_list[i]+1,0]).split(' ')[1].split(\":\")[2].split(\".\")[1])\r\n",
					"                        hour_ii=int(str(df_each_tag_with_radiation_pattern.iloc[index_list[i+1],0]).split(' ')[1].split(\":\")[0])\r\n",
					"                        minute_ii=int(str(df_each_tag_with_radiation_pattern.iloc[index_list[i+1],0]).split(' ')[1].split(\":\")[1])\r\n",
					"                        second_ii=int(str(df_each_tag_with_radiation_pattern.iloc[index_list[i+1],0]).split(' ')[1].split(\":\")[2].split(\".\")[0])\r\n",
					"                        #millisecond_ii=int(str(df_each_tag_with_radiation_pattern.iloc[index_list[i+1],0]).split(' ')[1].split(\":\")[2].split(\".\")[1])\r\n",
					"                        a=datetime.timedelta(hours=int(hour_i), minutes=int(minute_i), seconds=int(second_i)) \r\n",
					"                        b=datetime.timedelta(hours=int(hour_ii), minutes=int(minute_ii), seconds=int(second_ii))\r\n",
					"                        #print(hour_i,minute_i,second_i,hour_ii,minute_ii,second_ii)\r\n",
					"                        minute=(b-a).seconds/60\r\n",
					"                        downtime=downtime+minute\r\n",
					"                        energy_sum_during_downtimeRadiation_Block4[(Radiation_Block4[\"ISTtime\"]>=str(To)) & (Radiation_Block4[\"ISTtime\"]<=str(From))   ][\"value\"].sum()\r\n",
					"                        energy_loss=energy_loss+energy_sum_during_downtime\r\n",
					"                        ml2.append(minute)\r\n",
					"                        data_frame_inverter_downtime_list.extend([ml2])\r\n",
					"            each_tag_list.append(np.round(downtime,2))\r\n",
					"            each_tag_list.append(up_time)\r\n",
					"            each_tag_list.append(sleep_time)\r\n",
					"            each_tag_list.append(op_minute)\r\n",
					"            each_tag_list.append(op_minute-np.round(downtime,2))\r\n",
					"            each_tag_list.append(np.round(df_each_tag_inv_efficiency_average,4))\r\n",
					"            each_tag_list.append(np.round(df_each_tag_inv_efficiency_max,4))\r\n",
					"            each_tag_list.append(np.round((energy_loss/60000)*df_each_tag_inv_efficiency_max*downtime,2))\r\n",
					"            data_frame_list.append(each_tag_list)\r\n",
					"    data_frame_list_final.extend(data_frame_list)\r\n",
					"    data_frame_inverter_downtime_list_final.extend(data_frame_inverter_downtime_list)\r\n",
					"\r\n",
					"    print(len(data_frame_list_final))\r\n",
					"\r\n",
					"    data_frame_list=[]\r\n",
					"    data_frame_inverter_downtime_list=[]\r\n",
					"    for i in Block5_list:\r\n",
					"        each_tag_list=[]\r\n",
					"        each_tag_list.append(i)\r\n",
					"        df_each_tag=df2[df2[\"itemname\"]==i]\r\n",
					"        df_each_tag_with_radiation=pd.merge(df_each_tag,Radiation_Block5,how=\"inner\",left_on=[\"Hour\",\"Minute\"],right_on=[\"Hour\",\"Minute\"])\r\n",
					"        df_each_tag_with_radiation=df_each_tag_with_radiation.drop_duplicates(subset=[\"Hour\",\"Minute\"]).reset_index(drop=True)\r\n",
					"        df_each_tag_with_radiation=df_each_tag_with_radiation[[\"ISTtime_x\",\"itemname_x\",\"value_x\",\"value_y\"]]\r\n",
					"        df_each_tag_with_radiation_pattern=df_each_tag_with_radiation[(df_each_tag_with_radiation[\"value_x\"]==0) & (df_each_tag_with_radiation[\"value_y\"]!=0)].reset_index(drop=True)\r\n",
					"        up_time=str(df_each_tag_with_radiation[df_each_tag_with_radiation[\"value_x\"]!=0][\"ISTtime_x\"].head(1)).split(\" \")[4].split(\"\\n\")[0]\r\n",
					"        sleep_time=str(df_each_tag_with_radiation[df_each_tag_with_radiation[\"value_x\"]!=0][\"ISTtime_x\"].tail(1)).split(\" \")[4].split(\"\\n\")[0]\r\n",
					"        up_time_hour=up_time.split(\":\")[0]\r\n",
					"        up_time_minute=up_time.split(\":\")[1]\r\n",
					"        up_time_second=up_time.split(\":\")[2].split(\".\")[0]\r\n",
					"        #up_time_millisecond=up_time.split(\":\")[2].split(\".\")[1]\r\n",
					"        sleep_time_hour=sleep_time.split(\":\")[0]\r\n",
					"        sleep_time_minute=sleep_time.split(\":\")[1]\r\n",
					"        sleep_time_second=sleep_time.split(\":\")[2].split(\".\")[0]\r\n",
					"        #sleep_time_millisecond=sleep_time.split(\":\")[2].split(\".\")[1]\r\n",
					"        a1=datetime.timedelta(hours=int(up_time_hour), minutes=int(up_time_minute), seconds=int(up_time_second)) \r\n",
					"        b1=datetime.timedelta(hours=int(sleep_time_hour), minutes=int(sleep_time_minute), seconds=int(sleep_time_second))\r\n",
					"        op_minute=(b1-a1).seconds/60\r\n",
					"        df_each_tag_inv_efficiency_average=df1[(df1[\"itemname\"]==i.split(\".\")[0]+\"..\"+i.split(\".\")[2]+\".INVERTER_EFFICIENCY\") & (df1[\"value\"]!=0)][\"value\"].mean()\r\n",
					"        df_each_tag_inv_efficiency_max=df1[(df1[\"itemname\"]==i.split(\".\")[0]+\"..\"+i.split(\".\")[2]+\".INVERTER_EFFICIENCY\") & (df1[\"value\"]!=0)][\"value\"].max()\r\n",
					"        \r\n",
					"        #print(up_time,sleep_time)\r\n",
					"        downtime=0\r\n",
					"        energy_loss=0\r\n",
					"        if len(df_each_tag_with_radiation_pattern)==0:\r\n",
					"            each_tag_list.append(np.round(downtime,2))\r\n",
					"            each_tag_list.append(up_time)\r\n",
					"            each_tag_list.append(sleep_time)\r\n",
					"            each_tag_list.append(op_minute)\r\n",
					"            each_tag_list.append(op_minute-np.round(downtime,2))\r\n",
					"            each_tag_list.append(np.round(df_each_tag_inv_efficiency_average,4))\r\n",
					"            each_tag_list.append(np.round(df_each_tag_inv_efficiency_max,4))\r\n",
					"            each_tag_list.append(np.round((energy_loss/60000)*df_each_tag_inv_efficiency_max*downtime,2))\r\n",
					"            data_frame_list.append(each_tag_list) \r\n",
					"        else:\r\n",
					"            print(df_each_tag_with_radiation_pattern)\r\n",
					"            #energy_loss=list(df_each_tag_with_radiation_pattern[\"value_y\"])\r\n",
					"            #energy_loss=[i if i<890 else 890 for i in energy_loss]\r\n",
					"            #energy_loss=np.sum(energy_loss)\r\n",
					"            index_list=[-1]\r\n",
					"            for i in range(0,len(df_each_tag_with_radiation_pattern)):\r\n",
					"                if i<=len(df_each_tag_with_radiation_pattern)-2:\r\n",
					"                    #print(\"i=\",i)\r\n",
					"                    hour_i=int(str(df_each_tag_with_radiation_pattern.iloc[i,0]).split(' ')[1].split(\":\")[0])\r\n",
					"                    minute_i=int(str(df_each_tag_with_radiation_pattern.iloc[i,0]).split(' ')[1].split(\":\")[1])\r\n",
					"                    second_i=int(str(df_each_tag_with_radiation_pattern.iloc[i,0]).split(' ')[1].split(\":\")[2].split(\".\")[0])\r\n",
					"                    #millisecond_i=int(str(df_each_tag_with_radiation_pattern.iloc[i,0]).split(' ')[1].split(\":\")[2].split(\".\")[1])\r\n",
					"                    hour_ii=int(str(df_each_tag_with_radiation_pattern.iloc[i+1,0]).split(' ')[1].split(\":\")[0])\r\n",
					"                    minute_ii=int(str(df_each_tag_with_radiation_pattern.iloc[i+1,0]).split(' ')[1].split(\":\")[1])\r\n",
					"                    second_ii=int(str(df_each_tag_with_radiation_pattern.iloc[i+1,0]).split(' ')[1].split(\":\")[2].split(\".\")[0])\r\n",
					"                    #millisecond_ii=int(str(df_each_tag_with_radiation_pattern.iloc[i+1,0]).split(' ')[1].split(\":\")[2].split(\".\")[1])\r\n",
					"                    a=datetime.timedelta(hours=int(hour_i), minutes=int(minute_i), seconds=int(second_i)) \r\n",
					"                    b=datetime.timedelta(hours=int(hour_ii), minutes=int(minute_ii), seconds=int(second_ii))\r\n",
					"                    minute=(b-a).seconds/60\r\n",
					"                    #print(minute)\r\n",
					"                    if minute>3:\r\n",
					"                        index_list.append(i)\r\n",
					"                else:\r\n",
					"                    break\r\n",
					"            index_list.append(len(df_each_tag_with_radiation_pattern)-1)\r\n",
					"            downtime=0\r\n",
					"            energy_loss=0\r\n",
					"            print(index_list)\r\n",
					"            for i in range(len(index_list)):\r\n",
					"                if i<=(len(index_list)-2):\r\n",
					"                    To=str(df_each_tag_with_radiation_pattern.iloc[index_list[i]+1,0]).split(' ')[1]\r\n",
					"                    From=str(df_each_tag_with_radiation_pattern.iloc[index_list[i+1],0]).split(' ')[1]\r\n",
					"                    print(To,From)\r\n",
					"                    Energy_Tag=(df_each_tag_with_radiation_pattern.iloc[0,1].split(\"..\")[0])+\"..\"+(df_each_tag_with_radiation_pattern.iloc[0,1].split(\"..\")[1]).split(\".\")[0]+\".\"+\"TODAY_GEN\"\r\n",
					"                    print(\"Energy_Tag_is\",Energy_Tag)\r\n",
					"                    #deviation\r\n",
					"                    To=str(df.iloc[0,0]).split(\" \")[0]+\" \"+To\r\n",
					"                    From=str(df.iloc[0,0]).split(\" \")[0]+\" \"+From\r\n",
					"                    deviation=df[(df[\"itemname\"]==Energy_Tag) & (df[\"ISTtime\"]>=str(To)) & (df[\"ISTtime\"]<=str(From))   ][\"value\"].std()\r\n",
					"                    print(\"deviation is\",deviation)\r\n",
					"                    if deviation>0:\r\n",
					"\r\n",
					"\r\n",
					"                        ml2=[]\r\n",
					"                        ml2.append(str(df_each_tag_with_radiation_pattern.iloc[0,0]).split(' ')[0])\r\n",
					"                        ml2.append(df_each_tag_with_radiation_pattern.iloc[0,1])\r\n",
					"                        #To=str(df_each_tag_with_radiation_pattern.iloc[index_list[i]+1,0]).split(' ')[1]\r\n",
					"                        #From=str(df_each_tag_with_radiation_pattern.iloc[index_list[i+1],0]).split(' ')[1]\r\n",
					"\r\n",
					"                        ml2.append(str(df_each_tag_with_radiation_pattern.iloc[index_list[i]+1,0]).split(' ')[1])\r\n",
					"                        ml2.append(str(df_each_tag_with_radiation_pattern.iloc[index_list[i+1],0]).split(' ')[1])\r\n",
					"\r\n",
					"                        hour_i=int(str(df_each_tag_with_radiation_pattern.iloc[index_list[i]+1,0]).split(' ')[1].split(\":\")[0])\r\n",
					"                        minute_i=int(str(df_each_tag_with_radiation_pattern.iloc[index_list[i]+1,0]).split(' ')[1].split(\":\")[1])\r\n",
					"                        second_i=int(str(df_each_tag_with_radiation_pattern.iloc[index_list[i]+1,0]).split(' ')[1].split(\":\")[2].split(\".\")[0])\r\n",
					"                        #millisecond_i=int(str(df_each_tag_with_radiation_pattern.iloc[index_list[i]+1,0]).split(' ')[1].split(\":\")[2].split(\".\")[1])\r\n",
					"                        hour_ii=int(str(df_each_tag_with_radiation_pattern.iloc[index_list[i+1],0]).split(' ')[1].split(\":\")[0])\r\n",
					"                        minute_ii=int(str(df_each_tag_with_radiation_pattern.iloc[index_list[i+1],0]).split(' ')[1].split(\":\")[1])\r\n",
					"                        second_ii=int(str(df_each_tag_with_radiation_pattern.iloc[index_list[i+1],0]).split(' ')[1].split(\":\")[2].split(\".\")[0])\r\n",
					"                        #millisecond_ii=int(str(df_each_tag_with_radiation_pattern.iloc[index_list[i+1],0]).split(' ')[1].split(\":\")[2].split(\".\")[1])\r\n",
					"                        a=datetime.timedelta(hours=int(hour_i), minutes=int(minute_i), seconds=int(second_i)) \r\n",
					"                        b=datetime.timedelta(hours=int(hour_ii), minutes=int(minute_ii), seconds=int(second_ii))\r\n",
					"                        #print(hour_i,minute_i,second_i,hour_ii,minute_ii,second_ii)\r\n",
					"                        minute=(b-a).seconds/60\r\n",
					"                        downtime=downtime+minute\r\n",
					"                        energy_sum_during_downtime=Radiation_Block5[(Radiation_Block5[\"ISTtime\"]>=str(To)) & (Radiation_Block5[\"ISTtime\"]<=str(From))   ][\"value\"].sum()\r\n",
					"                        energy_loss=energy_loss+energy_sum_during_downtime\r\n",
					"                        ml2.append(minute)\r\n",
					"                        data_frame_inverter_downtime_list.extend([ml2])\r\n",
					"            each_tag_list.append(np.round(downtime,2))\r\n",
					"            each_tag_list.append(up_time)\r\n",
					"            each_tag_list.append(sleep_time)\r\n",
					"            each_tag_list.append(op_minute)\r\n",
					"            each_tag_list.append(op_minute-np.round(downtime,2))\r\n",
					"            each_tag_list.append(np.round(df_each_tag_inv_efficiency_average,4))\r\n",
					"            each_tag_list.append(np.round(df_each_tag_inv_efficiency_max,4))\r\n",
					"            each_tag_list.append(np.round((energy_loss/60000)*df_each_tag_inv_efficiency_max*downtime,2))\r\n",
					"            data_frame_list.append(each_tag_list)\r\n",
					"    data_frame_list_final.extend(data_frame_list)\r\n",
					"    data_frame_inverter_downtime_list_final.extend(data_frame_inverter_downtime_list)\r\n",
					"\r\n",
					"    print(len(data_frame_list_final))\r\n",
					"    columns=[\"itemname\",\"Downtime\",\"up_time\",\"Sleep_time\",\"OperationMinutes\",\"RunningMinutes\",\"Average_Efficiency\",\"Max_Efficiency\",\"EnergyLoss\"]\r\n",
					"    df_main1=pd.DataFrame(data_frame_list_final,columns=columns)\r\n",
					"    #df_main1['Date'] = df_main1['Date'].astype('datetime64[ns]')\r\n",
					"    #df_main1.to_excel(\"InverterT2ExtensioB2.xlsx\")\r\n",
					"\r\n",
					"    columns1=[\"Date\",\"Inv\",\"Down_From\",\"Down_To\",\"Minutes\"]\r\n",
					"    df_main2=pd.DataFrame(data_frame_inverter_downtime_list_final,columns=columns1)\r\n",
					"\r\n",
					"    df_main2=df_main2[df_main2[\"Minutes\"]!=0]\r\n",
					"    df_main2\r\n",
					"\r\n",
					"    if len(df_main2) !=0:\r\n",
					"        df_spark3=spark.createDataFrame(df_main2)\r\n",
					"        spark.sql(\"create database if not exists reassets\")\r\n",
					"        df_spark3.write.format(\"delta\").mode(\"append\").saveAsTable(\"reassets.invdowntime\")\r\n",
					"\r\n",
					"    df_main1[\"ICR\"]=df_main1[\"itemname\"].apply(lambda x:x.split(\"..\")[0])\r\n",
					"    df_main1[\"INV\"]=df_main1[\"itemname\"].apply(lambda x:x.split(\"..\")[1].split('.')[0])\r\n",
					"    ICR_dict={\"ICR1\":\"ICR01\",\r\n",
					"            \"ICR2\":\"ICR02\",\r\n",
					"            \"ICR3\":\"ICR03\",\r\n",
					"            \"ICR4\":\"ICR04\",\r\n",
					"            \"ICR5\":\"ICR05\",\r\n",
					"            \"ICR6\":\"ICR06\",\r\n",
					"            \"ICR7\":\"ICR07\",\r\n",
					"            \"ICR8\":\"ICR08\",\r\n",
					"            \"ICR9\":\"ICR09\"}\r\n",
					"    df_main1[\"ICR\"].replace(ICR_dict,inplace=True)\r\n",
					"\r\n",
					"    df_main1[\"Inv\"]=df_main1[\"ICR\"].str[0]+df_main1[\"ICR\"].str[-2:]+\"_\"+df_main1[\"INV\"].str[-1]\r\n",
					"    \r\n",
					"    Table2_Final=pd.merge(dfc1,df_main1,on=\"Inv\",how=\"inner\")\r\n",
					"\r\n",
					"    Table2_Final = Table2_Final.rename(columns={'value': 'Inverter_Energy'})\r\n",
					"\r\n",
					"    Table2_Final=Table2_Final[[\"Date\",\"itemname_x\",\"Inv\",\"Inverter_Energy\",\"Downtime\",\"up_time\",\"Sleep_time\",\"OperationMinutes\",\"RunningMinutes\",\"Average_Efficiency\",\"Max_Efficiency\",\"EnergyLoss\"]]\r\n",
					"    Table2_Final = Table2_Final.rename(columns={'itemname_x': 'itemname',\r\n",
					"                                            'Inverter_Energy':'InvEnergy',\r\n",
					"                                            'Downtime':'InvDowntime',\r\n",
					"                                            'up_time':'InvWakeUp',\r\n",
					"                                            'Sleep_time':'InvSleep',\r\n",
					"                                            'OperationMinutes':'InvOperationMinutes',\r\n",
					"                                            'RunningMinutes':'InvRunningMinutes',\r\n",
					"                                            'Average_Efficiency':'InvAvgEff',\r\n",
					"                                            'Max_Efficiency':'InvMaxEff',\r\n",
					"                                            'EnergyLoss':'InvEnergyLoss'})\r\n",
					"\r\n",
					"    location_output = \"abfss://repono@ayanadatalake.dfs.core.windows.net/inverterPerf/\"\r\n",
					"    Table2_Final.to_excel(location_output+\"inverter.xlsx\",index=False)\r\n",
					"    from pyspark.sql.types import StructType,StructField,StringType,DateType,FloatType,LongType,DoubleType\r\n",
					"    schema=StructType([\r\n",
					"                    StructField(\"Date\",DateType()),\r\n",
					"                    StructField(\"itemname\",StringType()),\r\n",
					"                    StructField(\"Inv\",StringType()),\r\n",
					"                    StructField(\"InvEnergy\",FloatType()),\r\n",
					"                    StructField(\"InvDowntime\",DoubleType()),\r\n",
					"                    StructField(\"InvWakeUp\",StringType()),\r\n",
					"                    StructField(\"InvSleep\",StringType()),\r\n",
					"                    StructField(\"InvOperationMinutes\",DoubleType()),\r\n",
					"                    StructField(\"InvRunningMinutes\",DoubleType()),\r\n",
					"                    StructField(\"InvAvgEff\",DoubleType()),\r\n",
					"                    StructField(\"InvMaxEff\",DoubleType()),\r\n",
					"                    StructField(\"InvEnergyLoss\",DoubleType()),\r\n",
					"    ])\r\n",
					"    df_spark2=spark.createDataFrame(Table2_Final,schema=schema)\r\n",
					"    spark.sql(\"create database if not exists reassets\")\r\n",
					"    df_spark2.write.format(\"delta\").mode(\"append\").saveAsTable(\"reassets.invperformance\")\r\n",
					"    location1=\"abfss://repono@ayanadatalake.dfs.core.windows.net/allcsvtoparquet/dt=\""
				],
				"execution_count": 13
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df=spark.sql(\"select * from reassets.invperformance\")\r\n",
					"df=df.toPandas()\r\n",
					"df.to_excel(\"abfss://devlop@ayanadatalake.dfs.core.windows.net/inverterPer/invperformance.xlsx\")"
				],
				"execution_count": 17
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					""
				]
			}
		]
	}
}