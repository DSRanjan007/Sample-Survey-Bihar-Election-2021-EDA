{
	"name": "tables",
	"properties": {
		"folder": {
			"name": "Bikaner"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "Sparkpool5",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "224g",
			"driverCores": 32,
			"executorMemory": "224g",
			"executorCores": 32,
			"numExecutors": 2,
			"runAsWorkspaceSystemIdentity": false,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "e3b081e1-1300-4d56-bbec-2760a4b185ed"
			}
		},
		"metadata": {
			"saveOutput": true,
			"synapse_widget": {
				"version": "0.1"
			},
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/37a47312-6f04-42dc-ad99-290d950fab5d/resourceGroups/AzureSynapse/providers/Microsoft.Synapse/workspaces/azure-synapse-devlop/bigDataPools/Sparkpool5",
				"name": "Sparkpool5",
				"type": "Spark",
				"endpoint": "https://azure-synapse-devlop.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/Sparkpool5",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net",
					"authHeader": null
				},
				"sparkVersion": "3.1",
				"nodeCount": 10,
				"cores": 32,
				"memory": 224,
				"extraHeader": null
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"import pandas as pd\r\n",
					"import numpy as np\r\n",
					"import datetime\r\n",
					"import matplotlib.pyplot as plt\r\n",
					"from datetime import datetime \r\n",
					"from datetime import date \r\n",
					"from datetime import timedelta\r\n",
					"from datetime import time\r\n",
					"import pytz\r\n",
					"import os\r\n",
					"from pathlib import Path\r\n",
					"import warnings\r\n",
					"warnings.filterwarnings('ignore')"
				],
				"execution_count": 381
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"LoopCounter=1\r\n",
					"tz = pytz.timezone('Asia/Kolkata')\r\n",
					"todaydate = datetime.date(datetime.now(tz))\r\n",
					"print(todaydate)\r\n",
					"mintime = datetime.min.time()\r\n",
					"DateList =[]\r\n",
					"while LoopCounter <= 1 :\r\n",
					"    DateList.append( datetime.date ( (datetime.combine(todaydate, mintime) - timedelta(days=LoopCounter)) ))\r\n",
					"    LoopCounter += 1\r\n",
					"DateListLength = len(DateList)\r\n",
					"print(DateList)\r\n",
					"TableLoopCounter = 0\r\n",
					"DateLoopCounter = 0"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"LoopCounter=1\r\n",
					"tz = pytz.timezone('Asia/Kolkata')\r\n",
					"todaydate = datetime.date(datetime.now(tz))\r\n",
					"print(todaydate)"
				],
				"execution_count": 383
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"path='abfss://acmerealtime@ayanadatalake.dfs.core.windows.net/ACME_realtime/*'\r\n",
					"path2='abfss://ayanaananthpuramrealtime@ayanadatalake.dfs.core.windows.net/ananthapuram_realtime_tags/'\r\n",
					"pattoreadcsv_a = \"abfss://bikanerrealtime@ayanadatalake.dfs.core.windows.net/bikaner_realtime_4841_d/\"\r\n",
					"pattoreadcsv_b = \"abfss://bikanerrealtime@ayanadatalake.dfs.core.windows.net/bikaner_realtime_opcda/\"\r\n",
					"path3='abfss://chikodi@ayanadatalake.dfs.core.windows.net/chikodi_cmx/'\r\n",
					"path4='abfss://phelanrealtime@ayanadatalake.dfs.core.windows.net/phelan_realtime/'\r\n",
					"path5='abfss://ayanapavagadadatalake@ayanadatalake.dfs.core.windows.net/PavagadaOpcData/Pavagada_RealTimeTags/'\r\n",
					"path6='abfss://ayanapavagadadatalake@ayanadatalake.dfs.core.windows.net/PavagadaOpcData/Pavagada_RealTime_OpcUa/'"
				],
				"execution_count": 384
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"p=[path,path2,pattoreadcsv_a,pattoreadcsv_b,path3,path4,path5,path6]"
				],
				"execution_count": 385
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def path(p):\r\n",
					"    pl=[]\r\n",
					"    for i in p:\r\n",
					"        location = i \r\n",
					"        location= location+ str(todaydate).split(\"-\")[0]+\"/\"+str(todaydate).split(\"-\")[1]+\"/\"+str(todaydate).split(\"-\")[2]+\"/\"+str(\"*\")\r\n",
					"        pl.append(location)\r\n",
					"    return pl    "
				],
				"execution_count": 386
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def path(p):\r\n",
					"    pl=[]\r\n",
					"    for i in p:\r\n",
					"        location = i \r\n",
					"        location= location+ str(DateList[DateLoopCounter]).split(\"-\")[0]+\"/\"+str(DateList[DateLoopCounter]).split(\"-\")[1]+\"/\"+str(DateList[DateLoopCounter]).split(\"-\")[2]+\"/\"+str(\"*\")\r\n",
					"        pl.append(location)\r\n",
					"    return pl               "
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"locations=path(p)\r\n",
					"locations"
				],
				"execution_count": 387
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def fd(x):\r\n",
					"    loop=0\r\n",
					"    try:\r\n",
					"\r\n",
					"        for i in range(len(locations)):     \r\n",
					"            if i==x:\r\n",
					"                df2_a = spark.read.load(locations[i], format='csv', header=True)\r\n",
					"                df2_a=df2_a.toPandas()\r\n",
					"        return df2_a\r\n",
					"    except:\r\n",
					"        print('None')"
				],
				"execution_count": 388
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def date_df(df2,x):\r\n",
					"            df2.sort_values(by=x,ascending=True,inplace=True)\r\n",
					"            df2[x]=df2[x].astype(\"datetime64[ns]\")\r\n",
					"            df2[\"Date\"]=pd.DatetimeIndex(df2[x]).date\r\n",
					"            df2[\"Hour\"]=pd.DatetimeIndex(df2[x]).hour\r\n",
					"            df2=df2[(df2[\"Hour\"]>=6) & (df2[\"Hour\"]<=18)]\r\n",
					"            return df2\r\n",
					""
				],
				"execution_count": 389
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df1=fd(0)\r\n",
					"df1\r\n",
					"try:\r\n",
					"    date_df(df1,\"ISTtime\")\r\n",
					"    df_acme=df1_1[df1_1['itemname']== r'\\\\APL\\1\\P\\ACME_PLANT_TODAYENERGY\\1']\r\n",
					"    df_acme1=df1_1[df1_1['itemname']== r'\\\\APL\\1\\P\\ACME_PLANT_IMPORT\\1']\r\n",
					"except:\r\n",
					"    exit"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df1=fd(0)\r\n",
					"df1_1=date_df(df1,\"ISTtime\")\r\n",
					"df1_1\r\n",
					"df_acme=df1_1[df1_1['itemname']== r'\\\\APL\\1\\P\\ACME_PLANT_TODAYENERGY\\1']\r\n",
					"df_acme1=df1_1[df1_1['itemname']== r'\\\\APL\\1\\P\\ACME_PLANT_IMPORT\\1']"
				],
				"execution_count": 392
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#df_acme1.head(2)"
				],
				"execution_count": 393
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df2=fd(1)\r\n",
					"df2=date_df(df2,\"ISTtime\")\r\n",
					"df_antpr=df2[df2['itemname']=='MCR..PLANT_TOD_GEN.Today_Gen']\r\n",
					"df_antpr1=df2[df2['itemname']=='MCR..PLANT_TOD_IMPORT.Today_Gen']\r\n",
					"df_antpr"
				],
				"execution_count": 394
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df3=fd(2)\r\n",
					"df3=date_df(df3,\"timestamp\")\r\n",
					"df4=fd(3)\r\n",
					"df4=date_df(df4,\"timestamp\")"
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"bik=pd.DataFrame()\r\n",
					"bik=bik.append(df3)\r\n",
					"bik=bik.append(df4)\r\n",
					"df_bik=bik[bik['itemname']=='MCR1..PLANT_TODAY_EXPORT_MWh']\r\n",
					"df_bik1=bik[bik['itemname']=='MCR1..PLANT_TODAY_IMPORT_MWh']"
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df_bik"
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df5=fd(4)\r\n",
					"date_df(df5,\"ISTtime\")\r\n",
					"df_chikodi=df5[df5['itemname']=='PLANT_DATA_EXP_ENGY']\r\n",
					"#df_chikodi1=df5[df5['itemname']=='PLANT_DATA_EXP_ENGY']\r\n",
					"df_chikodi"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df6=fd(5)\r\n",
					"df6\r\n",
					"try:\r\n",
					"    date_df(df6,\"ISTtime\")\r\n",
					"    df_phelan=df6[df6['itemname']=='PLANT_TODAY_EXP_KWH']\r\n",
					"    df_phelan1=df6[df6['itemname']=='PLANT_TODAY_EXP_KWH']\r\n",
					"    df_phelan\r\n",
					"except:\r\n",
					"    exit"
				],
				"execution_count": 395
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df7=fd(6)\r\n",
					"#date_df(df7,\"ISTtime\")\r\n",
					"df8=fd(7)\r\n",
					"#date_df(df8,\"ISTtime\")"
				],
				"execution_count": 407
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df_pavv=date_df(df7,\"ISTtime\")\r\n",
					"df_pav1=df_pavv[(df_pavv[\"itemname\"]==\"B2_MAIN_PLC..PLANT_150MW_TODAY_GENERATION_MWH\")]\r\n",
					"df_pav1"
				],
				"execution_count": 408
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df_pav1['value']=df_pav1['value'].astype(float)\r\n",
					"df_pav1['value'].max()"
				],
				"execution_count": 413
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df_pavv1=date_df(df8,\"ISTtime\")\r\n",
					"df_pav2=df_pavv[(df_pavv[\"itemname\"]==\"PLANTDATA_ENY_EXP_TDAY\")]\r\n",
					"df_pav2"
				],
				"execution_count": 415
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df_pav2=date_df(df8,\"ISTtime\")\r\n",
					"\r\n",
					"df_pav2=df_pav2[(df_pav2[\"itemname\"]==\"PLANTDATA_ENY_EXP_TDAY\") ]\r\n",
					"#df_pav2=df_pav2[df_pav2['Date']=='2022-12-06']"
				],
				"execution_count": 322
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df_pav1_imp=date_df(df7,\"ISTtime\")\r\n",
					"df_pav1_imp=df_pav1[(df_pav1_imp[\"itemname\"]==\"B2_MAIN_PLC..PLANT_150MW_TODAY_IMPORT_MWH\") ]\r\n",
					"df_pav1_imp.head(1)"
				],
				"execution_count": 323
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df_pav1_imp['value'].max()"
				],
				"execution_count": 324
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df_pav=pd.DataFrame()\r\n",
					"df_pav=df_pav.append(df7)\r\n",
					"df_pav=df_pav.append(df8)\r\n",
					"df_pav=date_df(df_pav,\"ISTtime\")\r\n",
					"df_pav1=df_pav[(df_pav[\"itemname\"]==\"B2_MAIN_PLC..PLANT_150MW_TODAY_GENERATION_MWH\") | (df_pav[\"itemname\"]==\"PLANTDATA_ENY_EXP_TDAY\")]\r\n",
					"df_pav1"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df_pav2=date_df(df8,\"ISTtime\")\r\n",
					"df_pav2_imp=df_pav2[(df_pav2[\"itemname\"]==\"PLANTDATA_ENY_IMP_TDAY\") ]\r\n",
					"df_pav2_imp.head(1)"
				],
				"execution_count": 325
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df_pav1_imp[\"Date\"].unique()"
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df_pav1['Date']=df_pav1['Date'].apply(lambda x:str(x))\r\n",
					"a=df_pav1[df_pav1['itemname']=='B2_MAIN_PLC..PLANT_150MW_TODAY_GENERATION_MWH']\r\n",
					"a['value'].max()"
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"b=df_pav1[df_pav1['itemname']=='PLANTDATA_ENY_EXP_TDAY']\r\n",
					"b=b['value'].max()/1000\r\n",
					"b"
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df_pav_1=df_pav1[df_pav1['Date']=='2022-12-06']"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df_pav2['Date']=df_pav2['Date'].apply(lambda x:str(x))\r\n",
					"df_pav2_imp['Date']==df_pav2_imp['Date'].apply(lambda x:str(x))\r\n",
					"df_pav22=df_pav2[df_pav2['Date']=='2022-12-06']\r\n",
					"df_pav22_imp=df_pav2_imp[df_pav2_imp['Date']=='2022-12-06']"
				],
				"execution_count": 326
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df_pav22_imp['value'].max()"
				],
				"execution_count": 327
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df_pav22['value'].max()"
				],
				"execution_count": 328
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def max_d(df):\r\n",
					"    df['value']=df['value'].astype(float)\r\n",
					"    grouped_data=df.groupby(['itemname']).max()\r\n",
					"    max_val=grouped_data['value'].sum()\r\n",
					"    #grouped_data['date'] = pd.DatetimeIndex(grouped_data['timestamp']).date\r\n",
					"    #Date=grouped_data['date'].unique()\r\n",
					"    return max_val"
				],
				"execution_count": 329
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"final_df=pd.DataFrame()"
				],
				"execution_count": 330
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"max_acme=max_d(df_acme)\r\n",
					"max_acme"
				],
				"execution_count": 331
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"max_acme1=max_d(df_acme1)\r\n",
					"max_acme1"
				],
				"execution_count": 332
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"max_antpr=max_d(df_antpr)\r\n",
					"max_antpr"
				],
				"execution_count": 333
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"max_antpr1=max_d(df_antpr1)\r\n",
					"max_antpr1"
				],
				"execution_count": 334
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"max_bik=max_d(df_bik)\r\n",
					"max_bik"
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"max_chikodi=max_d(df_chikodi)/1000\r\n",
					"max_chikodi"
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"max_phelan=max_d(df_phelan)\r\n",
					"max_phelan"
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#max_pav=max_d(df_pav1)/1000\r\n",
					"#max_pav\r\n",
					"max_pav="
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"max_pav1=max_d(df_pav1)\r\n",
					"max_pav2=max_d(df_pav22)\r\n",
					"max_pav1_imp=max_d(df_pav1_imp)\r\n",
					"max_pav2_imp=max_d(df_pav22_imp)\r\n",
					"print(max_pav1,max_pav2,max_pav1_imp,max_pav2_imp)\r\n",
					""
				],
				"execution_count": 335
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"static_antpr=pd.read_excel('abfss://devlop@ayanadatalake.dfs.core.windows.net/Bikaner/static_file.xlsx',sheet_name='Ananthpur')\r\n",
					"static_antpr"
				],
				"execution_count": 336
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"final_df=pd.DataFrame()"
				],
				"execution_count": 337
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"static_bikaner=pd.read_excel('abfss://devlop@ayanadatalake.dfs.core.windows.net/Bikaner/static_file.xlsx',sheet_name='Bikaner')\r\n",
					"static_acme=pd.read_excel('abfss://devlop@ayanadatalake.dfs.core.windows.net/Bikaner/static_file.xlsx',sheet_name='Acme')\r\n",
					"static_pavagada=pd.read_excel('abfss://devlop@ayanadatalake.dfs.core.windows.net/Bikaner/static_file.xlsx',sheet_name='Pavagada')\r\n",
					"static_chikodi=pd.read_excel('abfss://devlop@ayanadatalake.dfs.core.windows.net/Bikaner/static_file.xlsx',sheet_name='Chikodi')\r\n",
					"static_phelan=pd.read_excel('abfss://devlop@ayanadatalake.dfs.core.windows.net/Bikaner/static_file.xlsx',sheet_name='Phelan')\r\n",
					""
				],
				"execution_count": 338
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"column_names=[\"Date\",\"Actual\",\"Budgeted\",\"SPP\"]\r\n",
					"dff=pd.DataFrame(columns=column_names)\r\n",
					"dff"
				],
				"execution_count": 339
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def app(dff,max_val,max_val1,static,SPP,df):\r\n",
					"    val=static['Per Unit Price'].unique()\r\n",
					"    dff['Actual']=([max_val-max_val1]*val*1000)/100000\r\n",
					"    dff['Date']=df['Date'].unique()\r\n",
					"    x=static[static[\"Date\"].isin(dff[\"Date\"])]\r\n",
					"    n=x['Budgeted']\r\n",
					"    n=float(n)\r\n",
					"    dff['Budgeted']=(n*val*1000)/100000\r\n",
					"    dff['SPP']=SPP\r\n",
					"    dff['Actual MTD']=dff['Actual']\r\n",
					"    dff['Budgeted MTD']=dff['Budgeted']\r\n",
					"    dff['Actual YTD']=dff['Actual']\r\n",
					"    dff['Budgeted YTD']=dff['Budgeted']\r\n",
					"    return dff"
				],
				"execution_count": 340
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"data1=app(dff,max_acme,max_acme1,static_acme,\"Acme\",df_acme)\r\n",
					"data1\r\n",
					"final_df=final_df.append(data1)"
				],
				"execution_count": 341
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"final_df"
				],
				"execution_count": 342
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"data2=app(dff,max_antpr,max_antpr1,static_antpr,\"Ananthpur\",df_antpr)\r\n",
					"data2\r\n",
					"final_df=final_df.append(data2)\r\n",
					""
				],
				"execution_count": 343
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"data3=app(dff,max_bik,static_bikaner,\"Bikaner\",df_bik)\r\n",
					"data3\r\n",
					"final_df=final_df.append(data3)\r\n",
					""
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"data4=app(dff,max_chikodi,static_chikodi,\"Chikodi\",df_chikodi)\r\n",
					"data4\r\n",
					"final_df=final_df.append(data4)"
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"data5=app(dff,max_phelan,static_phelan,\"Phelan\",df_phelan)\r\n",
					"data5\r\n",
					"final_df=final_df.append(data5)"
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"data6=app(dff,max_pav,static_pavagada,\"Pavagada\",df_pav_1)\r\n",
					"data6\r\n",
					"final_df=final_df.append(data6)\r\n",
					"final_df"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"static=pd.read_excel('abfss://devlop@ayanadatalake.dfs.core.windows.net/Bikaner/actual_budgeted.xlsx')\r\n",
					"static"
				],
				"execution_count": 344
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"file_df=static[static[\"SPP\"].isin(final_df[\"SPP\"])]\r\n",
					"file_df"
				],
				"execution_count": 345
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"final_df=final_df[['SPP','Date','Actual','Budgeted','Actual MTD','Budgeted MTD','Actual YTD','Budgeted YTD']]\r\n",
					"final_df"
				],
				"execution_count": 346
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"data=pd.concat([file_df,final_df])"
				],
				"execution_count": 347
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"z=data.groupby('SPP',as_index=False).agg({'Actual MTD':'sum','Actual YTD':'sum','Budgeted MTD':'sum','Budgeted YTD':'sum'})"
				],
				"execution_count": 359
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"z"
				],
				"execution_count": 360
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"y=final_df[['SPP','Date','Actual','Budgeted']]\r\n",
					"y"
				],
				"execution_count": 361
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"q=pd.merge(y,z,how='right',on='SPP')\r\n",
					"q"
				],
				"execution_count": 362
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"q.to_excel('abfss://devlop@ayanadatalake.dfs.core.windows.net/Bikaner/actual_budgeted.xlsx')"
				],
				"execution_count": 364
			}
		]
	}
}